"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey";
exports.ids = ["vendor-chunks/@turnkey"];
exports.modules = {

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@turnkey\"), __webpack_require__.e(\"vendor-chunks/sha256-uint8array\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RDs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4TUFBeUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdOQUEwQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdSQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwRUFBdUI7QUFDckQ7QUFDQTtBQUNBOztBQUV5QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzPzRmMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBIZWFkZXIgbmFtZSBmb3IgYW4gQVBJIGtleSBzdGFtcFxuY29uc3Qgc3RhbXBIZWFkZXJOYW1lID0gXCJYLVN0YW1wXCI7XG4vLyBgd2luZG93LmRvY3VtZW50YCBlbnN1cmVzIHRoYXQgd2UncmUgaW4gYSBicm93c2VyIGNvbnRleHRcbi8vIGFuZCBgY3J5cHRvLnN1YnRsZWAgZW5zdXJlcyB0aGF0IGl0IHN1cHBvcnRzIHRoZSB3ZWIgY3J5cHRvIEFQSXNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbmNvbnN0IGlzQ3J5cHRvRW5hYmxlZEJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgY3J5cHRvLnN1YnRsZSAhPT0gXCJ1bmRlZmluZWRcIjtcbi8vIFdlIGNoZWNrIGBwcm9jZXNzLnZlcnNpb25zLm5vZGVgXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbmNvbnN0IGlzTm9kZSA9IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucyAhPSBudWxsICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9IG51bGw7XG4vKipcbiAqIFNpZ25hdHVyZSBmdW5jdGlvbiBhYnN0cmFjdGluZyB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBOb2RlSlMgYW5kIHdlYiBlbnZpcm9ubWVudHMgZm9yIHNpZ25pbmcgd2l0aCBBUEkga2V5cy5cbiAqL1xuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBpZiAoaXNDcnlwdG9FbmFibGVkQnJvd3Nlcikge1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi93ZWJjcnlwdG8ubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZSkge1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi9ub2RlY3J5cHRvLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBOb2RlSlMgb3Igd2ViIGNyeXB0byBhdCBvdXIgZGlzcG9zYWwsIGRlZmF1bHQgdG8gcHVyZSBKUyBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIGZvciBvbGQgYnJvd3NlcnMgYW5kIHJlYWN0IG5hdGl2ZSBlbnZpcm9ubWVudHNcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vcHVyZWpzLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbn07XG4vKipcbiAqIFN0YW1wZXIgdG8gdXNlIHdpdGggYEB0dXJua2V5L2h0dHBgJ3MgYFR1cm5rZXlDbGllbnRgXG4gKi9cbmNsYXNzIEFwaUtleVN0YW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmFwaVB1YmxpY0tleSA9IGNvbmZpZy5hcGlQdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuYXBpUHJpdmF0ZUtleSA9IGNvbmZpZy5hcGlQcml2YXRlS2V5O1xuICAgIH1cbiAgICBhc3luYyBzdGFtcChwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNpZ25XaXRoQXBpS2V5KHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogdGhpcy5hcGlQdWJsaWNLZXksXG4gICAgICAgICAgICBwcml2YXRlS2V5OiB0aGlzLmFwaVByaXZhdGVLZXksXG4gICAgICAgICAgICBjb250ZW50OiBwYXlsb2FkLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3RhbXAgPSB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHRoaXMuYXBpUHVibGljS2V5LFxuICAgICAgICAgICAgc2NoZW1lOiBcIlNJR05BVFVSRV9TQ0hFTUVfVEtfQVBJX1AyNTZcIixcbiAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhbXBIZWFkZXJOYW1lOiBzdGFtcEhlYWRlck5hbWUsXG4gICAgICAgICAgICBzdGFtcEhlYWRlclZhbHVlOiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhKU09OLnN0cmluZ2lmeShzdGFtcCkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQXBpS2V5U3RhbXBlciwgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3VCOztBQUV4RDtBQUNBLFlBQVksaUNBQWlDO0FBQzdDLDZCQUE2QixvREFBdUI7QUFDcEQ7QUFDQTtBQUNBLGFBQWEscUVBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDhDQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L25vZGVjcnlwdG8ubWpzP2Y3NzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGVudCwgcHVibGljS2V5LCBwcml2YXRlS2V5IH0gPSBpbnB1dDtcbiAgICBjb25zdCBwcml2YXRlS2V5T2JqZWN0ID0gY3J5cHRvLmNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0tIHRoZSBrZXkgY2FuIGJlIGEgSldLIG9iamVjdCBzaW5jZSBOb2RlIHYxNS4xMi4wXG4gICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvY3J5cHRvLmh0bWwjY3J5cHRvY3JlYXRlcHJpdmF0ZWtleWtleVxuICAgICAgICBrZXk6IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soe1xuICAgICAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleDogcHJpdmF0ZUtleSxcbiAgICAgICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICAgICAgfSksXG4gICAgICAgIGZvcm1hdDogXCJqd2tcIixcbiAgICB9KTtcbiAgICBjb25zdCBzaWduID0gY3J5cHRvLmNyZWF0ZVNpZ24oXCJTSEEyNTZcIik7XG4gICAgc2lnbi53cml0ZShCdWZmZXIuZnJvbShjb250ZW50KSk7XG4gICAgc2lnbi5lbmQoKTtcbiAgICByZXR1cm4gc2lnbi5zaWduKHByaXZhdGVLZXlPYmplY3QsIFwiaGV4XCIpO1xufTtcblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVjcnlwdG8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0s7QUFDVzs7QUFFMUQ7QUFDQSxzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQSw0QkFBNEIsd0VBQXFCO0FBQ2pEO0FBQ0EsbUVBQW1FLGdCQUFnQixRQUFRLGdCQUFnQjtBQUMzRztBQUNBLGlCQUFpQiw2REFBVTtBQUMzQixzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3B1cmVqcy5tanM/NTRjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwMjU2IH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9wMjU2JztcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdzaGEyNTYtdWludDhhcnJheSc7XG5pbXBvcnQgeyB1aW50OEFycmF5VG9IZXhTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgcHVibGljS2V5ID0gcDI1Ni5nZXRQdWJsaWNLZXkoaW5wdXQucHJpdmF0ZUtleSwgdHJ1ZSk7XG4gICAgLy8gUHVibGljIGtleSBpbiB0aGUgdXN1YWwgMDIgb3IgMDMgKyA2NCBoZXggZGlnaXRzXG4gICAgY29uc3QgcHVibGljS2V5U3RyaW5nID0gdWludDhBcnJheVRvSGV4U3RyaW5nKHB1YmxpY0tleSk7XG4gICAgaWYgKHB1YmxpY0tleVN0cmluZyAhPSBpbnB1dC5wdWJsaWNLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgQVBJIGtleS4gRXhwZWN0ZWQgdG8gZ2V0IHB1YmxpYyBrZXkgJHtpbnB1dC5wdWJsaWNLZXl9LCBnb3QgJHtwdWJsaWNLZXlTdHJpbmd9YCk7XG4gICAgfVxuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCkudXBkYXRlKGlucHV0LmNvbnRlbnQpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHAyNTYuc2lnbihoYXNoLCBpbnB1dC5wcml2YXRlS2V5KTtcbiAgICByZXR1cm4gc2lnbmF0dXJlLnRvREVSSGV4KCk7XG59O1xuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVyZWpzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3RpbmsvYnl0ZXMubWpzP2IyYjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9ieXRlcy50c1xuICpcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG4vKipcbiAqIENvbnZlcnRzIHRoZSBoZXggc3RyaW5nIHRvIGEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gaGV4IHRoZSBpbnB1dFxuICogQHJldHVybiB0aGUgYnl0ZSBhcnJheSBvdXRwdXRcbiAqIEB0aHJvd3MgeyFFcnJvcn1cbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gZnJvbUhleChoZXgpIHtcbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIgIT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIG11bHRpcGxlIG9mIDJcIik7XG4gICAgfVxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBhcnJbaSAvIDJdID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyhpLCBpICsgMiksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBieXRlIGFycmF5IHRvIGhleC5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIGJ5dGUgYXJyYXkgaW5wdXRcbiAqIEByZXR1cm4gaGV4IHRoZSBvdXRwdXRcbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gdG9IZXgoYnl0ZXMpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGhleEJ5dGUgPSBieXRlc1tpXS50b1N0cmluZygxNik7XG4gICAgICAgIHJlc3VsdCArPSBoZXhCeXRlLmxlbmd0aCA+IDEgPyBoZXhCeXRlIDogXCIwXCIgKyBoZXhCeXRlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBCYXNlNjQgZW5jb2RlIGEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIGJ5dGUgYXJyYXkgaW5wdXRcbiAqIEBwYXJhbSBvcHRfd2ViU2FmZSBUcnVlIGluZGljYXRlcyB3ZSBzaG91bGQgdXNlIHRoZSBhbHRlcm5hdGl2ZVxuICogICAgIGFscGhhYmV0LCB3aGljaCBkb2VzIG5vdCByZXF1aXJlIGVzY2FwaW5nIGZvciB1c2UgaW4gVVJMcy5cbiAqIEByZXR1cm4gYmFzZTY0IG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0Jhc2U2NChieXRlcywgb3B0X3dlYlNhZmUpIHtcbiAgICBjb25zdCBlbmNvZGVkID0gYnRvYShcbiAgICAvKiBwYWRkaW5nICovXG4gICAgdG9CeXRlU3RyaW5nKGJ5dGVzKSkucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICBpZiAob3B0X3dlYlNhZmUpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZWQucmVwbGFjZSgvXFwrL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCJfXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbi8qKlxuICogVHVybnMgYSBieXRlIGFycmF5IGludG8gdGhlIHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcbiAqIGNoYXJhY3RlcnMgdG8gd2hpY2ggdGhlIG51bWJlcnMgY29ycmVzcG9uZC4gRWFjaCBieXRlIGlzIGNvcnJlc3BvbmRpbmcgdG8gYVxuICogY2hhcmFjdGVyLiBEb2VzIG5vdCBzdXBwb3J0IG11bHRpLWJ5dGUgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmdcbiAqICAgICBjaGFyYWN0ZXJzLlxuICogQHJldHVybiBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiB0b0J5dGVTdHJpbmcoYnl0ZXMpIHtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IHsgZnJvbUhleCwgdG9CYXNlNjQsIHRvQnl0ZVN0cmluZywgdG9IZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i) {\n    let input = i.toString(16);\n    // If necessary, prepend leading zero to ensure that input length is even.\n    input = input.length % 2 === 0 ? input : \"0\" + input;\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n * Decodes a public key in _compressed_ format.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    if (point.length !== 1 + fieldSize) {\n        throw new Error(\"compressed point has wrong length\");\n    }\n    if (point[0] !== 2 && point[0] !== 3) {\n        throw new Error(\"invalid format\");\n    }\n    const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n    const x = byteArrayToInteger(point.subarray(1, point.length));\n    const p = getModulus();\n    if (x < BigInt(0) || x >= p) {\n        throw new Error(\"x is out of range\");\n    }\n    const y = getY(x, lsb);\n    const result = {\n        kty: \"EC\",\n        crv: \"P-256\",\n        x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x), /* websafe */ true),\n        y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y), /* websafe */ true),\n        ext: true,\n    };\n    return result;\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)(hexStringToUint8Array(compressedPublicKeyHex));\n    jwk.d = hexStringToBase64urlString(uncompressedPrivateKeyHex);\n    return jwk;\n}\nfunction hexStringToUint8Array(input) {\n    if (input.length === 0 ||\n        input.length % 2 !== 0 ||\n        /[^a-fA-F0-9]/u.test(input)) {\n        throw new Error(`Invalid hex string: ${JSON.stringify(input)}`);\n    }\n    return Uint8Array.from(input\n        .match(/.{2}/g // Split string by every two characters\n    )\n        .map((byte) => parseInt(byte, 16)));\n}\nfunction hexStringToBase64urlString(input) {\n    const buffer = hexStringToUint8Array(input);\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.stringToBase64urlString)(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUNHOztBQUU1RDtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFLGdCQUFnQixzRUFBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxzQkFBc0I7QUFDckU7QUFDQTtBQUNBLGtCQUFrQixFQUFFO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDBFQUF1QjtBQUNsQzs7QUFFcUM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3V0aWxzLm1qcz84NjNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBvaW50RGVjb2RlIH0gZnJvbSAnLi90aW5rL2VsbGlwdGljX2N1cnZlcy5tanMnO1xuaW1wb3J0IHsgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbmZ1bmN0aW9uIGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soaW5wdXQpIHtcbiAgICBjb25zdCB7IHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIGNvbXByZXNzZWRQdWJsaWNLZXlIZXggfSA9IGlucHV0O1xuICAgIGNvbnN0IGp3ayA9IHBvaW50RGVjb2RlKGhleFN0cmluZ1RvVWludDhBcnJheShjb21wcmVzc2VkUHVibGljS2V5SGV4KSk7XG4gICAgandrLmQgPSBoZXhTdHJpbmdUb0Jhc2U2NHVybFN0cmluZyh1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4KTtcbiAgICByZXR1cm4gandrO1xufVxuZnVuY3Rpb24gaGV4U3RyaW5nVG9VaW50OEFycmF5KGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICBpbnB1dC5sZW5ndGggJSAyICE9PSAwIHx8XG4gICAgICAgIC9bXmEtZkEtRjAtOV0vdS50ZXN0KGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGV4IHN0cmluZzogJHtKU09OLnN0cmluZ2lmeShpbnB1dCl9YCk7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oaW5wdXRcbiAgICAgICAgLm1hdGNoKC8uezJ9L2cgLy8gU3BsaXQgc3RyaW5nIGJ5IGV2ZXJ5IHR3byBjaGFyYWN0ZXJzXG4gICAgKVxuICAgICAgICAubWFwKChieXRlKSA9PiBwYXJzZUludChieXRlLCAxNikpKTtcbn1cbmZ1bmN0aW9uIGhleFN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKGlucHV0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gaGV4U3RyaW5nVG9VaW50OEFycmF5KGlucHV0KTtcbiAgICByZXR1cm4gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoYnVmZmVyLnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpLCBcIlwiKSk7XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDRTs7QUFFMUQ7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHFFQUF5QjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLHdFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC93ZWJjcnlwdG8ubWpzP2RmMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9IGZyb20gJy4vdXRpbHMubWpzJztcbmltcG9ydCB7IHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBjb250ZW50LCBwdWJsaWNLZXksIHByaXZhdGVLZXkgfSA9IGlucHV0O1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IGltcG9ydFR1cm5rZXlBcGlLZXkoe1xuICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5LFxuICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4OiBwdWJsaWNLZXksXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IHNpZ25NZXNzYWdlKHsga2V5LCBjb250ZW50IH0pO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFR1cm5rZXlBcGlLZXkoaW5wdXQpIHtcbiAgICBjb25zdCB7IHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIGNvbXByZXNzZWRQdWJsaWNLZXlIZXggfSA9IGlucHV0O1xuICAgIGNvbnN0IGp3ayA9IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soe1xuICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LFxuICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4LFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcImp3a1wiLCBqd2ssIHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBuYW1lZEN1cnZlOiBcIlAtMjU2XCIsXG4gICAgfSwgZmFsc2UsIC8vIG5vdCBleHRyYWN0YWJsZVxuICAgIFtcInNpZ25cIl0gLy8gYWxsb3cgc2lnbmluZ1xuICAgICk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZShpbnB1dCkge1xuICAgIGNvbnN0IHsga2V5LCBjb250ZW50IH0gPSBpbnB1dDtcbiAgICBjb25zdCBzaWduYXR1cmVJZWVlMTM2MyA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbih7XG4gICAgICAgIG5hbWU6IFwiRUNEU0FcIixcbiAgICAgICAgaGFzaDogXCJTSEEtMjU2XCIsXG4gICAgfSwga2V5LCBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY29udGVudCkpO1xuICAgIGNvbnN0IHNpZ25hdHVyZURlciA9IGNvbnZlcnRFY2RzYUllZWUxMzYzVG9EZXIobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlSWVlZTEzNjMpKTtcbiAgICByZXR1cm4gdWludDhBcnJheVRvSGV4U3RyaW5nKHNpZ25hdHVyZURlcik7XG59XG4vKipcbiAqIGBTdWJ0bGVDcnlwdG8uc2lnbiguLi4pYCBvdXRwdXRzIHNpZ25hdHVyZSBpbiBJRUVFIFAxMzYzIGZvcm1hdDpcbiAqIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N1YnRsZUNyeXB0by9zaWduI2VjZHNhXG4gKlxuICogVHVybmtleSBleHBlY3RzIHRoZSBzaWduYXR1cmUgZW5jb2RpbmcgdG8gYmUgREVSLWVuY29kZWQgQVNOLjE6XG4gKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS90a2hxL3RrY2xpL2Jsb2IvN2YwMTU5YWY1YTczMzg3ZmYwNTA2NDcxODBkMWRiNGQzYTNhYTAzMy9zcmMvaW50ZXJuYWwvYXBpa2V5L2FwaWtleS5nbyNMMTQ5XG4gKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvdGluay9ibG9iLzZmNzRiOTlhMmJmZTY2NzdlMzY3MDc5OTExNmE1NzI2OGZkMDY3ZmEvamF2YXNjcmlwdC9zdWJ0bGUvZWxsaXB0aWNfY3VydmVzLnRzI0wxMTRcbiAqXG4gKiBUcmFuc2Zvcm0gYW4gRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgMTM2MyBlbmNvZGluZyB0byBERVIgZW5jb2RpbmcuXG4gKlxuICogQHBhcmFtIGllZWUgdGhlIEVDRFNBIHNpZ25hdHVyZSBpbiBJRUVFIGVuY29kaW5nXG4gKiBAcmV0dXJuIEVDRFNBIHNpZ25hdHVyZSBpbiBERVIgZW5jb2RpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihpZWVlKSB7XG4gICAgaWYgKGllZWUubGVuZ3RoICUgMiAhPSAwIHx8IGllZWUubGVuZ3RoID09IDAgfHwgaWVlZS5sZW5ndGggPiAxMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBJRUVFIFAxMzYzIHNpZ25hdHVyZSBlbmNvZGluZy4gTGVuZ3RoOiBcIiArIGllZWUubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgciA9IHRvVW5zaWduZWRCaWdOdW0oaWVlZS5zdWJhcnJheSgwLCBpZWVlLmxlbmd0aCAvIDIpKTtcbiAgICBjb25zdCBzID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KGllZWUubGVuZ3RoIC8gMiwgaWVlZS5sZW5ndGgpKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSAxICsgMSArIHIubGVuZ3RoICsgMSArIDEgKyBzLmxlbmd0aDtcbiAgICBsZXQgZGVyO1xuICAgIGlmIChsZW5ndGggPj0gMTI4KSB7XG4gICAgICAgIGRlciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCArIDMpO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gNDg7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSAxMjggKyAxO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMik7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IGxlbmd0aDtcbiAgICB9XG4gICAgZGVyW29mZnNldCsrXSA9IDI7XG4gICAgZGVyW29mZnNldCsrXSA9IHIubGVuZ3RoO1xuICAgIGRlci5zZXQociwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gci5sZW5ndGg7XG4gICAgZGVyW29mZnNldCsrXSA9IDI7XG4gICAgZGVyW29mZnNldCsrXSA9IHMubGVuZ3RoO1xuICAgIGRlci5zZXQocywgb2Zmc2V0KTtcbiAgICByZXR1cm4gZGVyO1xufVxuLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDMxMVxuICpcbiAqIFRyYW5zZm9ybSBhIGJpZyBpbnRlZ2VyIGluIGJpZyBlbmRpYW4gdG8gbWluaW1hbCB1bnNpZ25lZCBmb3JtIHdoaWNoIGhhc1xuICogbm8gZXh0cmEgemVybyBhdCB0aGUgYmVnaW5uaW5nIGV4Y2VwdCB3aGVuIHRoZSBoaWdoZXN0IGJpdCBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIHRvVW5zaWduZWRCaWdOdW0oYnl0ZXMpIHtcbiAgICAvLyBSZW1vdmUgemVybyBwcmVmaXhlcy5cbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIHdoaWxlIChzdGFydCA8IGJ5dGVzLmxlbmd0aCAmJiBieXRlc1tzdGFydF0gPT0gMCkge1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPT0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHN0YXJ0ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgbGV0IGV4dHJhWmVybyA9IDA7XG4gICAgLy8gSWYgdGhlIDFzdCBiaXQgaXMgbm90IHplcm8sIGFkZCAxIHplcm8gYnl0ZS5cbiAgICBpZiAoKGJ5dGVzW3N0YXJ0XSAmIDEyOCkgPT0gMTI4KSB7XG4gICAgICAgIC8vIEFkZCBleHRyYSB6ZXJvLlxuICAgICAgICBleHRyYVplcm8gPSAxO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShieXRlcy5sZW5ndGggLSBzdGFydCArIGV4dHJhWmVybyk7XG4gICAgcmVzLnNldChieXRlcy5zdWJhcnJheShzdGFydCksIGV4dHJhWmVybyk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYmNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9fc2hvcnR3X3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDcUI7QUFDUDtBQUN4RDtBQUNPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyx3REFBSSxZQUFZLGdFQUFXO0FBQzNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ087QUFDUCw2QkFBNkIscUVBQVcsR0FBRywrQkFBK0I7QUFDMUUsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL19zaG9ydHdfdXRpbHMuanM/ZTlkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgd2VpZXJzdHJhc3MgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbi8vIGNvbm5lY3RzIG5vYmxlLWN1cnZlcyB0byBub2JsZS1oYXNoZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNoLFxuICAgICAgICBobWFjOiAoa2V5LCAuLi5tc2dzKSA9PiBobWFjKGhhc2gsIGtleSwgY29uY2F0Qnl0ZXMoLi4ubXNncykpLFxuICAgICAgICByYW5kb21CeXRlcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1cnZlKGN1cnZlRGVmLCBkZWZIYXNoKSB7XG4gICAgY29uc3QgY3JlYXRlID0gKGhhc2gpID0+IHdlaWVyc3RyYXNzKHsgLi4uY3VydmVEZWYsIC4uLmdldEhhc2goaGFzaCkgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyAuLi5jcmVhdGUoZGVmSGFzaCksIGNyZWF0ZSB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9zaG9ydHdfdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nfunction bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        _utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(key))\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   p256: () => (/* binding */ p256),\n/* harmony export */   secp256r1: () => (/* binding */ secp256r1)\n/* harmony export */ });\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n// prettier-ignore\nconst p256 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: CURVE_A, // Equation params: a, b\n    b: CURVE_B,\n    Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n    // Curve order, total count of valid points in the field\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    // Base (generator) point (x, y)\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n    h: BigInt(1),\n    lowS: false,\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\nconst secp256r1 = p256;\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_3__.mapToCurveSimpleSWU)(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(secp256r1.ProjectivePoint, (scalars) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=p256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9wMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ2lEO0FBQ0g7QUFDQTtBQUNrQjtBQUNMO0FBQzNEO0FBQ0E7QUFDQSxXQUFXLDJEQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNPLGFBQWEsNkRBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUUsd0RBQU07QUFDRjtBQUNQLHNDQUFzQyw2RUFBbUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1DQUFtQyx3RUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdEQUFNO0FBQ2hCLENBQUM7QUFDTTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vcDI1Ni5qcz8xM2JkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmltcG9ydCB7IGNyZWF0ZUN1cnZlIH0gZnJvbSAnLi9fc2hvcnR3X3V0aWxzLmpzJztcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMjU2JztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9hYnN0cmFjdC9tb2R1bGFyLmpzJztcbmltcG9ydCB7IG1hcFRvQ3VydmVTaW1wbGVTV1UgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUhhc2hlciB9IGZyb20gJy4vYWJzdHJhY3QvaGFzaC10by1jdXJ2ZS5qcyc7XG4vLyBOSVNUIHNlY3AyNTZyMSBha2EgcDI1NlxuLy8gaHR0cHM6Ly93d3cuc2VjZy5vcmcvc2VjMi12Mi5wZGYsIGh0dHBzOi8vbmV1cm9tYW5jZXIuc2svc3RkL25pc3QvUC0yNTZcbmNvbnN0IEZwID0gRmllbGQoQmlnSW50KCcweGZmZmZmZmZmMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKSk7XG5jb25zdCBDVVJWRV9BID0gRnAuY3JlYXRlKEJpZ0ludCgnLTMnKSk7XG5jb25zdCBDVVJWRV9CID0gQmlnSW50KCcweDVhYzYzNWQ4YWEzYTkzZTdiM2ViYmQ1NTc2OTg4NmJjNjUxZDA2YjBjYzUzYjBmNjNiY2UzYzNlMjdkMjYwNGInKTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IHAyNTYgPSBjcmVhdGVDdXJ2ZSh7XG4gICAgYTogQ1VSVkVfQSwgLy8gRXF1YXRpb24gcGFyYW1zOiBhLCBiXG4gICAgYjogQ1VSVkVfQixcbiAgICBGcCwgLy8gRmllbGQ6IDJuKioyMjRuICogKDJuKiozMm4tMW4pICsgMm4qKjE5Mm4gKyAybioqOTZuLTFuXG4gICAgLy8gQ3VydmUgb3JkZXIsIHRvdGFsIGNvdW50IG9mIHZhbGlkIHBvaW50cyBpbiB0aGUgZmllbGRcbiAgICBuOiBCaWdJbnQoJzB4ZmZmZmZmZmYwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZiY2U2ZmFhZGE3MTc5ZTg0ZjNiOWNhYzJmYzYzMjU1MScpLFxuICAgIC8vIEJhc2UgKGdlbmVyYXRvcikgcG9pbnQgKHgsIHkpXG4gICAgR3g6IEJpZ0ludCgnMHg2YjE3ZDFmMmUxMmM0MjQ3ZjhiY2U2ZTU2M2E0NDBmMjc3MDM3ZDgxMmRlYjMzYTBmNGExMzk0NWQ4OThjMjk2JyksXG4gICAgR3k6IEJpZ0ludCgnMHg0ZmUzNDJlMmZlMWE3ZjliOGVlN2ViNGE3YzBmOWUxNjJiY2UzMzU3NmIzMTVlY2VjYmI2NDA2ODM3YmY1MWY1JyksXG4gICAgaDogQmlnSW50KDEpLFxuICAgIGxvd1M6IGZhbHNlLFxufSwgc2hhMjU2KTtcbmV4cG9ydCBjb25zdCBzZWNwMjU2cjEgPSBwMjU2O1xuY29uc3QgbWFwU1dVID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwLCB7XG4gICAgQTogQ1VSVkVfQSxcbiAgICBCOiBDVVJWRV9CLFxuICAgIFo6IEZwLmNyZWF0ZShCaWdJbnQoJy0xMCcpKSxcbn0pKSgpO1xuY29uc3QgaHRmID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBjcmVhdGVIYXNoZXIoc2VjcDI1NnIxLlByb2plY3RpdmVQb2ludCwgKHNjYWxhcnMpID0+IG1hcFNXVShzY2FsYXJzWzBdKSwge1xuICAgIERTVDogJ1AyNTZfWE1EOlNIQS0yNTZfU1NXVV9ST18nLFxuICAgIGVuY29kZURTVDogJ1AyNTZfWE1EOlNIQS0yNTZfU1NXVV9OVV8nLFxuICAgIHA6IEZwLk9SREVSLFxuICAgIG06IDEsXG4gICAgazogMTI4LFxuICAgIGV4cGFuZDogJ3htZCcsXG4gICAgaGFzaDogc2hhMjU2LFxufSkpKCk7XG5leHBvcnQgY29uc3QgaGFzaFRvQ3VydmUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGh0Zi5oYXNoVG9DdXJ2ZSkoKTtcbmV4cG9ydCBjb25zdCBlbmNvZGVUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuZW5jb2RlVG9DdXJ2ZSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXAyNTYuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBLDBEQUEwRCxFQUFFO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsa0JBQWtCLFNBQVM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixJQUFJO0FBQ3JGO0FBQ0E7QUFDcUQ7QUFDckQsaUJBQWlCO0FBQ2pCLGlFQUFlLE1BQU0sRUFBQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzPzBkZDciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pIHx8IG4gPCAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBvc2l0aXZlIGludGVnZXIgZXhwZWN0ZWQsIG5vdCAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBib29sZWFuIGV4cGVjdGVkLCBub3QgJHtifWApO1xufVxuLy8gY29waWVkIGZyb20gdXRpbHNcbmV4cG9ydCBmdW5jdGlvbiBpc0J5dGVzKGEpIHtcbiAgICByZXR1cm4gKGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8XG4gICAgICAgIChhICE9IG51bGwgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnICYmIGEuY29uc3RydWN0b3IubmFtZSA9PT0gJ1VpbnQ4QXJyYXknKSk7XG59XG5mdW5jdGlvbiBieXRlcyhiLCAuLi5sZW5ndGhzKSB7XG4gICAgaWYgKCFpc0J5dGVzKGIpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgICBpZiAobGVuZ3Rocy5sZW5ndGggPiAwICYmICFsZW5ndGhzLmluY2x1ZGVzKGIubGVuZ3RoKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVaW50OEFycmF5IGV4cGVjdGVkIG9mIGxlbmd0aCAke2xlbmd0aHN9LCBub3Qgb2YgbGVuZ3RoPSR7Yi5sZW5ndGh9YCk7XG59XG5mdW5jdGlvbiBoYXNoKGgpIHtcbiAgICBpZiAodHlwZW9mIGggIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGguY3JlYXRlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggc2hvdWxkIGJlIHdyYXBwZWQgYnkgdXRpbHMud3JhcENvbnN0cnVjdG9yJyk7XG4gICAgbnVtYmVyKGgub3V0cHV0TGVuKTtcbiAgICBudW1iZXIoaC5ibG9ja0xlbik7XG59XG5mdW5jdGlvbiBleGlzdHMoaW5zdGFuY2UsIGNoZWNrRmluaXNoZWQgPSB0cnVlKSB7XG4gICAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCcpO1xuICAgIGlmIChjaGVja0ZpbmlzaGVkICYmIGluc3RhbmNlLmZpbmlzaGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQnKTtcbn1cbmZ1bmN0aW9uIG91dHB1dChvdXQsIGluc3RhbmNlKSB7XG4gICAgYnl0ZXMob3V0KTtcbiAgICBjb25zdCBtaW4gPSBpbnN0YW5jZS5vdXRwdXRMZW47XG4gICAgaWYgKG91dC5sZW5ndGggPCBtaW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaWdlc3RJbnRvKCkgZXhwZWN0cyBvdXRwdXQgYnVmZmVyIG9mIGxlbmd0aCBhdCBsZWFzdCAke21pbn1gKTtcbiAgICB9XG59XG5leHBvcnQgeyBudW1iZXIsIGJvb2wsIGJ5dGVzLCBoYXNoLCBleGlzdHMsIG91dHB1dCB9O1xuY29uc3QgYXNzZXJ0ID0geyBudW1iZXIsIGJvb2wsIGJ5dGVzLCBoYXNoLCBleGlzdHMsIG91dHB1dCB9O1xuZXhwb3J0IGRlZmF1bHQgYXNzZXJ0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Fzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fbWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEM7QUFDUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsMkNBQUk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBVTtBQUM5QjtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLGdCQUFnQix5QkFBeUI7QUFDekMsZUFBZSxrREFBTztBQUN0QjtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxxREFBVTtBQUMzQyx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLFFBQVEsa0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0MsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19tZC5qcz9hZGYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4aXN0cywgb3V0cHV0IH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIGNyZWF0ZVZpZXcsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIFBvbHlmaWxsIGZvciBTYWZhcmkgMTRcbmZ1bmN0aW9uIHNldEJpZ1VpbnQ2NCh2aWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSkge1xuICAgIGlmICh0eXBlb2Ygdmlldy5zZXRCaWdVaW50NjQgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aWV3LnNldEJpZ1VpbnQ2NChieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSk7XG4gICAgY29uc3QgXzMybiA9IEJpZ0ludCgzMik7XG4gICAgY29uc3QgX3UzMl9tYXggPSBCaWdJbnQoMHhmZmZmZmZmZik7XG4gICAgY29uc3Qgd2ggPSBOdW1iZXIoKHZhbHVlID4+IF8zMm4pICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IHdsID0gTnVtYmVyKHZhbHVlICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IGggPSBpc0xFID8gNCA6IDA7XG4gICAgY29uc3QgbCA9IGlzTEUgPyAwIDogNDtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgaCwgd2gsIGlzTEUpO1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBsLCB3bCwgaXNMRSk7XG59XG4vLyBDaG9pY2U6IGEgPyBiIDogY1xuZXhwb3J0IGNvbnN0IENoaSA9IChhLCBiLCBjKSA9PiAoYSAmIGIpIF4gKH5hICYgYyk7XG4vLyBNYWpvcml0eSBmdW5jdGlvbiwgdHJ1ZSBpZiBhbnkgdHdvIGlucHVzdCBpcyB0cnVlXG5leHBvcnQgY29uc3QgTWFqID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTtcbi8qKlxuICogTWVya2xlLURhbWdhcmQgaGFzaCBjb25zdHJ1Y3Rpb24gYmFzZSBjbGFzcy5cbiAqIENvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIE1ENSwgUklQRU1ELCBTSEExLCBTSEEyLlxuICovXG5leHBvcnQgY2xhc3MgSGFzaE1EIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIG91dHB1dExlbiwgcGFkT2Zmc2V0LCBpc0xFKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMucGFkT2Zmc2V0ID0gcGFkT2Zmc2V0O1xuICAgICAgICB0aGlzLmlzTEUgPSBpc0xFO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgdGhpcy52aWV3ID0gY3JlYXRlVmlldyh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIC8vIFBhZGRpbmdcbiAgICAgICAgLy8gV2UgY2FuIGF2b2lkIGFsbG9jYXRpb24gb2YgYnVmZmVyIGZvciBwYWRkaW5nIGNvbXBsZXRlbHkgaWYgaXRcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbm90IGFsbG9jYXRlZCBoZXJlLiBCdXQgaXQgd29uJ3QgY2hhbmdlIHBlcmZvcm1hbmNlLlxuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgdmlldywgYmxvY2tMZW4sIGlzTEUgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7IHBvcyB9ID0gdGhpcztcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXG4gICAgICAgIGJ1ZmZlcltwb3MrK10gPSAwYjEwMDAwMDAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zdWJhcnJheShwb3MpLmZpbGwoMCk7XG4gICAgICAgIC8vIHdlIGhhdmUgbGVzcyB0aGFuIHBhZE9mZnNldCBsZWZ0IGluIGJ1ZmZlciwgc28gd2UgY2Fubm90IHB1dCBsZW5ndGggaW5cbiAgICAgICAgLy8gY3VycmVudCBibG9jaywgbmVlZCBwcm9jZXNzIGl0IGFuZCBwYWQgYWdhaW5cbiAgICAgICAgaWYgKHRoaXMucGFkT2Zmc2V0ID4gYmxvY2tMZW4gLSBwb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFkIHVudGlsIGZ1bGwgYmxvY2sgYnl0ZSB3aXRoIHplcm9zXG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBibG9ja0xlbjsgaSsrKVxuICAgICAgICAgICAgYnVmZmVyW2ldID0gMDtcbiAgICAgICAgLy8gTm90ZTogc2hhNTEyIHJlcXVpcmVzIGxlbmd0aCB0byBiZSAxMjhiaXQgaW50ZWdlciwgYnV0IGxlbmd0aCBpbiBKUyB3aWxsIG92ZXJmbG93IGJlZm9yZSB0aGF0XG4gICAgICAgIC8vIFlvdSBuZWVkIHRvIHdyaXRlIGFyb3VuZCAyIGV4YWJ5dGVzICh1NjRfbWF4IC8gOCAvICgxMDI0Kio2KSkgZm9yIHRoaXMgdG8gaGFwcGVuLlxuICAgICAgICAvLyBTbyB3ZSBqdXN0IHdyaXRlIGxvd2VzdCA2NCBiaXRzIG9mIHRoYXQgdmFsdWUuXG4gICAgICAgIHNldEJpZ1VpbnQ2NCh2aWV3LCBibG9ja0xlbiAtIDgsIEJpZ0ludCh0aGlzLmxlbmd0aCAqIDgpLCBpc0xFKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICBjb25zdCBvdmlldyA9IGNyZWF0ZVZpZXcob3V0KTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5vdXRwdXRMZW47XG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXG4gICAgICAgIGlmIChsZW4gJSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIHNob3VsZCBiZSBhbGlnbmVkIHRvIDMyYml0Jyk7XG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgaWYgKG91dExlbiA+IHN0YXRlLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgICAgICAgICAgb3ZpZXcuc2V0VWludDMyKDQgKiBpLCBzdGF0ZVtpXSwgaXNMRSk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcbiAgICAgICAgdG8uc2V0KC4uLnRoaXMuZ2V0KCkpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBidWZmZXIsIGxlbmd0aCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgcG9zIH0gPSB0aGlzO1xuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRvLnBvcyA9IHBvcztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICBpZiAobGVuZ3RoICUgYmxvY2tMZW4pXG4gICAgICAgICAgICB0by5idWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fbWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQzNCLGVBQWUsMk1BQUUsV0FBVywyTUFBRSxpQkFBaUIsME5BQWlCLEdBQUcsa0RBQVk7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcz8zMjc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIHVzZSBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gYnJvd3NlcnMgYW5kIG5vZGUuanMgMTYrLlxuLy8gU2VlIHV0aWxzLnRzIGZvciBkZXRhaWxzLlxuLy8gVGhlIGZpbGUgd2lsbCB0aHJvdyBvbiBub2RlLmpzIDE0IGFuZCBlYXJsaWVyLlxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgbmMgZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IGNvbnN0IGNyeXB0byA9IG5jICYmIHR5cGVvZiBuYyA9PT0gJ29iamVjdCcgJiYgJ3dlYmNyeXB0bycgaW4gbmMgPyBuYy53ZWJjcnlwdG8gOiB1bmRlZmluZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9Ob2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9obWFjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0c7QUFDckQ7QUFDM0M7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdEQUFVO0FBQ2xCLG9CQUFvQixrREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQixRQUFRLGlEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLGdCQUFnQix5REFBeUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanM/YjM5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXNoIGFzIGFzc2VydEhhc2gsIGJ5dGVzIGFzIGFzc2VydEJ5dGVzLCBleGlzdHMgYXMgYXNzZXJ0RXhpc3RzIH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIEhNQUMgKFJGQyAyMTA0KVxuZXhwb3J0IGNsYXNzIEhNQUMgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoLCBfa2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgYXNzZXJ0SGFzaChoYXNoKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdG9CeXRlcyhfa2V5KTtcbiAgICAgICAgdGhpcy5pSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pSGFzaC51cGRhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGluc3RhbmNlIG9mIGNsYXNzIHdoaWNoIGV4dGVuZHMgdXRpbHMuSGFzaCcpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gdGhpcy5pSGFzaC5ibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSB0aGlzLmlIYXNoLm91dHB1dExlbjtcbiAgICAgICAgY29uc3QgYmxvY2tMZW4gPSB0aGlzLmJsb2NrTGVuO1xuICAgICAgICBjb25zdCBwYWQgPSBuZXcgVWludDhBcnJheShibG9ja0xlbik7XG4gICAgICAgIC8vIGJsb2NrTGVuIGNhbiBiZSBiaWdnZXIgdGhhbiBvdXRwdXRMZW5cbiAgICAgICAgcGFkLnNldChrZXkubGVuZ3RoID4gYmxvY2tMZW4gPyBoYXNoLmNyZWF0ZSgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpIDoga2V5KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNjtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgLy8gQnkgZG9pbmcgdXBkYXRlIChwcm9jZXNzaW5nIG9mIGZpcnN0IGJsb2NrKSBvZiBvdXRlciBoYXNoIGhlcmUgd2UgY2FuIHJlLXVzZSBpdCBiZXR3ZWVuIG11bHRpcGxlIGNhbGxzIHZpYSBjbG9uZVxuICAgICAgICB0aGlzLm9IYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgLy8gVW5kbyBpbnRlcm5hbCBYT1IgJiYgYXBwbHkgb3V0ZXIgWE9SXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzYgXiAweDVjO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICBwYWQuZmlsbCgwKTtcbiAgICB9XG4gICAgdXBkYXRlKGJ1Zikge1xuICAgICAgICBhc3NlcnRFeGlzdHModGhpcyk7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKGJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBhc3NlcnRFeGlzdHModGhpcyk7XG4gICAgICAgIGFzc2VydEJ5dGVzKG91dCwgdGhpcy5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLm9IYXNoLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGlnZXN0SW50byhvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2Ugd2l0aG91dCBjYWxsaW5nIGNvbnN0cnVjdG9yIHNpbmNlIGtleSBhbHJlYWR5IGluIHN0YXRlIGFuZCB3ZSBkb24ndCBrbm93IGl0LlxuICAgICAgICB0byB8fCAodG8gPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwge30pKTtcbiAgICAgICAgY29uc3QgeyBvSGFzaCwgaUhhc2gsIGZpbmlzaGVkLCBkZXN0cm95ZWQsIGJsb2NrTGVuLCBvdXRwdXRMZW4gfSA9IHRoaXM7XG4gICAgICAgIHRvID0gdG87XG4gICAgICAgIHRvLmZpbmlzaGVkID0gZmluaXNoZWQ7XG4gICAgICAgIHRvLmRlc3Ryb3llZCA9IGRlc3Ryb3llZDtcbiAgICAgICAgdG8uYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdG8ub3V0cHV0TGVuID0gb3V0cHV0TGVuO1xuICAgICAgICB0by5vSGFzaCA9IG9IYXNoLl9jbG9uZUludG8odG8ub0hhc2gpO1xuICAgICAgICB0by5pSGFzaCA9IGlIYXNoLl9jbG9uZUludG8odG8uaUhhc2gpO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vSGFzaC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaUhhc2guZGVzdHJveSgpO1xuICAgIH1cbn1cbi8qKlxuICogSE1BQzogUkZDMjEwNCBtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIGNvZGUuXG4gKiBAcGFyYW0gaGFzaCAtIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCBlLmcuIHNoYTI1NlxuICogQHBhcmFtIGtleSAtIG1lc3NhZ2Uga2V5XG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1lc3NhZ2UgZGF0YVxuICovXG5leHBvcnQgY29uc3QgaG1hYyA9IChoYXNoLCBrZXksIG1lc3NhZ2UpID0+IG5ldyBITUFDKGhhc2gsIGtleSkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdCgpO1xuaG1hYy5jcmVhdGUgPSAoaGFzaCwga2V5KSA9PiBuZXcgSE1BQyhoYXNoLCBrZXkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1hYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/encoding/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\n// Polyfill btoa with a pure JS implementation. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQSx3RkFBd0YsaUJBQWlCLGNBQWMsRUFBRTtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdHO0FBQ2hHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9lbmNvZGluZy9kaXN0L2luZGV4Lm1qcz81NmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvd2ViYXV0aG4tanNvbi9ibG9iL2U5MzJiMzU4NWZhNzBiMGJkNWI1YTQwMTJiYTdkYmFkN2IwYTBkMGYvc3JjL3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLnRzI0wyM1xuICovXG5mdW5jdGlvbiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhpbnB1dCkge1xuICAgIC8vIHN0cmluZyB0byBiYXNlNjQgLS0gd2UgZG8gbm90IHJlbHkgb24gdGhlIGJyb3dzZXIncyBidG9hIHNpbmNlIGl0J3Mgbm90IHByZXNlbnQgaW4gUmVhY3QgTmF0aXZlIGVudmlyb25tZW50c1xuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2EoaW5wdXQpO1xuICAgIHJldHVybiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoYmFzZTY0U3RyaW5nKTtcbn1cbmZ1bmN0aW9uIGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPS9nLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHVpbnQ4QXJyYXlUb0hleFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZWR1Y2UoKHJlc3VsdCwgeCkgPT4gcmVzdWx0ICsgeC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpLCBcIlwiKTtcbn1cbi8vIFBvbHlmaWxsIGJ0b2Egd2l0aCBhIHB1cmUgSlMgaW1wbGVtZW50YXRpb24uIFRoaXMgaXMgYWRhcHRlZCBmcm9tIHRoZSBmb2xsb3dpbmc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vYWJhYi9ibG9iLzgwODc0YWUxZmUxY2RlMmU1ODdiYjZlNTFiNmQ3YzliNDJjYTFkMzQvbGliL2J0b2EuanNcbmZ1bmN0aW9uIGJ0b2Eocykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgIH1cbiAgICBsZXQgaTtcbiAgICAvLyBTdHJpbmcgY29udmVyc2lvbiBhcyByZXF1aXJlZCBieSBXZWIgSURMLlxuICAgIHMgPSBgJHtzfWA7XG4gICAgLy8gXCJUaGUgYnRvYSgpIG1ldGhvZCBtdXN0IHRocm93IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yXCIgRE9NRXhjZXB0aW9uIGlmXG4gICAgLy8gZGF0YSBjb250YWlucyBhbnkgY2hhcmFjdGVyIHdob3NlIGNvZGUgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIFUrMDBGRi5cIlxuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZENoYXJhY3RlckVycm9yOiBmb3VuZCBjb2RlIHBvaW50IGdyZWF0ZXIgdGhhbiAyNTU6JHtzLmNoYXJDb2RlQXQoaSl9IGF0IHBvc2l0aW9uICR7aX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBncm91cHNPZlNpeCA9IFtcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgXTtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMF0gPSBzLmNoYXJDb2RlQXQoaSkgPj4gMjtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gPSAocy5jaGFyQ29kZUF0KGkpICYgMHgwMykgPDwgNDtcbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzFdIHw9IHMuY2hhckNvZGVBdChpICsgMSkgPj4gNDtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdID0gKHMuY2hhckNvZGVBdChpICsgMSkgJiAweDBmKSA8PCAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmxlbmd0aCA+IGkgKyAyKSB7XG4gICAgICAgICAgICBncm91cHNPZlNpeFsyXSB8PSBzLmNoYXJDb2RlQXQoaSArIDIpID4+IDY7XG4gICAgICAgICAgICBncm91cHNPZlNpeFszXSA9IHMuY2hhckNvZGVBdChpICsgMikgJiAweDNmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBzT2ZTaXgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzT2ZTaXhbal0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gYnRvYUxvb2t1cChncm91cHNPZlNpeFtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGJ0b2FMb29rdXAoaW5kZXgpIHtcbiAgICAvKipcbiAgICAgKiBMb29rdXAgdGFibGUgZm9yIGJ0b2EoKSwgd2hpY2ggY29udmVydHMgYSBzaXgtYml0IG51bWJlciBpbnRvIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgQVNDSUkgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGtleXN0ciA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgNjQpIHtcbiAgICAgICAgcmV0dXJuIGtleXN0cltpbmRleF07XG4gICAgfVxuICAgIC8vIFRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUiBleGNlcHRpb24gaGVyZSAtLSB3b24ndCBiZSBoaXQgaW4gdGhlIHRlc3RzLlxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZywgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcsIHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get all suborg IDs associated given a parent org ID and an optional filter.\n         *\n         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).\n         *\n         * See also {@link stampGetSubOrgIds}.\n         */\n        this.getSubOrgIds = async (input) => {\n            return this.request(\"/public/v1/query/list_suborgs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetSubOrgIds}.\n         */\n        this.stampGetSubOrgIds = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_suborgs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Policies\n         *\n         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).\n         *\n         * See also {@link stampCreatePolicies}.\n         */\n        this.createPolicies = async (input) => {\n            return this.request(\"/public/v1/submit/create_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicies}.\n         */\n        this.stampCreatePolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Private Key Tags within an Organization\n         *\n         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).\n         *\n         * See also {@link stampDeletePrivateKeyTags}.\n         */\n        this.deletePrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePrivateKeyTags}.\n         */\n        this.stampDeletePrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete User Tags within an Organization\n         *\n         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).\n         *\n         * See also {@link stampDeleteUserTags}.\n         */\n        this.deleteUserTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUserTags}.\n         */\n        this.stampDeleteUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Users within an Organization\n         *\n         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).\n         *\n         * See also {@link stampDeleteUsers}.\n         */\n        this.deleteUsers = async (input) => {\n            return this.request(\"/public/v1/submit/delete_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUsers}.\n         */\n        this.stampDeleteUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a private key\n         *\n         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).\n         *\n         * See also {@link stampImportPrivateKey}.\n         */\n        this.importPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportPrivateKey}.\n         */\n        this.stampImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a wallet\n         *\n         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).\n         *\n         * See also {@link stampImportWallet}.\n         */\n        this.importWallet = async (input) => {\n            return this.request(\"/public/v1/submit/import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportWallet}.\n         */\n        this.stampImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new private key import\n         *\n         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).\n         *\n         * See also {@link stampInitImportPrivateKey}.\n         */\n        this.initImportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportPrivateKey}.\n         */\n        this.stampInitImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new wallet import\n         *\n         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).\n         *\n         * See also {@link stampInitImportWallet}.\n         */\n        this.initImportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportWallet}.\n         */\n        this.stampInitImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign multiple raw payloads with the same signing parameters\n         *\n         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).\n         *\n         * See also {@link stampSignRawPayloads}.\n         */\n        this.signRawPayloads = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payloads\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayloads}.\n         */\n        this.stampSignRawPayloads = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payloads\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createPolicies: () => (/* binding */ createPolicies),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   deletePrivateKeyTags: () => (/* binding */ deletePrivateKeyTags),\n/* harmony export */   deleteUserTags: () => (/* binding */ deleteUserTags),\n/* harmony export */   deleteUsers: () => (/* binding */ deleteUsers),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getSubOrgIds: () => (/* binding */ getSubOrgIds),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   importPrivateKey: () => (/* binding */ importPrivateKey),\n/* harmony export */   importWallet: () => (/* binding */ importWallet),\n/* harmony export */   initImportPrivateKey: () => (/* binding */ initImportPrivateKey),\n/* harmony export */   initImportWallet: () => (/* binding */ initImportWallet),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreatePolicies: () => (/* binding */ signCreatePolicies),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signDeletePrivateKeyTags: () => (/* binding */ signDeletePrivateKeyTags),\n/* harmony export */   signDeleteUserTags: () => (/* binding */ signDeleteUserTags),\n/* harmony export */   signDeleteUsers: () => (/* binding */ signDeleteUsers),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetSubOrgIds: () => (/* binding */ signGetSubOrgIds),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signImportPrivateKey: () => (/* binding */ signImportPrivateKey),\n/* harmony export */   signImportWallet: () => (/* binding */ signImportWallet),\n/* harmony export */   signInitImportPrivateKey: () => (/* binding */ signInitImportPrivateKey),\n/* harmony export */   signInitImportWallet: () => (/* binding */ signInitImportWallet),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRawPayloads: () => (/* binding */ signRawPayloads),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignRawPayloads: () => (/* binding */ signSignRawPayloads),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Suborgs\n *\n * Get all suborg IDs associated given a parent org ID and an optional filter.\n *\n * `POST /public/v1/query/list_suborgs`\n */\nconst getSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_suborgs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetSubOrgIds}\n */\nconst signGetSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_suborgs\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policies\n *\n * Create new Policies\n *\n * `POST /public/v1/submit/create_policies`\n */\nconst createPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicies}\n */\nconst signCreatePolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policies\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Private Key Tags\n *\n * Delete Private Key Tags within an Organization\n *\n * `POST /public/v1/submit/delete_private_key_tags`\n */\nconst deletePrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePrivateKeyTags}\n */\nconst signDeletePrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete User Tags\n *\n * Delete User Tags within an Organization\n *\n * `POST /public/v1/submit/delete_user_tags`\n */\nconst deleteUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUserTags}\n */\nconst signDeleteUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Users\n *\n * Delete Users within an Organization\n *\n * `POST /public/v1/submit/delete_users`\n */\nconst deleteUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUsers}\n */\nconst signDeleteUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_users\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Import Private Key\n *\n * Imports a private key\n *\n * `POST /public/v1/submit/import_private_key`\n */\nconst importPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportPrivateKey}\n */\nconst signImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Import Wallet\n *\n * Imports a wallet\n *\n * `POST /public/v1/submit/import_wallet`\n */\nconst importWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportWallet}\n */\nconst signImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Private Key\n *\n * Initializes a new private key import\n *\n * `POST /public/v1/submit/init_import_private_key`\n */\nconst initImportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportPrivateKey}\n */\nconst signInitImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Wallet\n *\n * Initializes a new wallet import\n *\n * `POST /public/v1/submit/init_import_wallet`\n */\nconst initImportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportWallet}\n */\nconst signInitImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payloads\n *\n * Sign multiple raw payloads with the same signing parameters\n *\n * `POST /public/v1/submit/sign_raw_payloads`\n */\nconst signRawPayloads = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayloads}\n */\nconst signSignRawPayloads = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/async.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/async.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/base.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/base.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/config.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/config.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2NvbmZpZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixLQUFLO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFMEQ7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9jb25maWcubWpzPzNmMmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29uZmlnID0ge1xuICAgIGFwaVB1YmxpY0tleTogbnVsbCxcbiAgICBhcGlQcml2YXRlS2V5OiBudWxsLFxuICAgIGJhc2VVcmw6IG51bGwsXG59O1xuY29uc3QgYnJvd3NlckNvbmZpZyA9IHtcbiAgICBiYXNlVXJsOiBudWxsLFxufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBpbnN0ZWFkLCB3aGljaCBkb2Vzbid0IHJlbHkgb24gZ2xvYmFsIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICovXG5mdW5jdGlvbiBicm93c2VySW5pdCh2YWx1ZSkge1xuICAgIGJyb3dzZXJDb25maWcuYmFzZVVybCA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmJhc2VVcmwsIFwiYmFzZVVybFwiKTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBpbnN0ZWFkLCB3aGljaCBkb2Vzbid0IHJlbHkgb24gZ2xvYmFsIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICovXG5mdW5jdGlvbiBpbml0KHZhbHVlKSB7XG4gICAgY29uZmlnLmFwaVB1YmxpY0tleSA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmFwaVB1YmxpY0tleSwgXCJhcGlQdWJsaWNLZXlcIik7XG4gICAgY29uZmlnLmFwaVByaXZhdGVLZXkgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5hcGlQcml2YXRlS2V5LCBcImFwaVByaXZhdGVLZXlcIik7XG4gICAgY29uZmlnLmJhc2VVcmwgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5iYXNlVXJsLCBcImJhc2VVcmxcIik7XG59XG5mdW5jdGlvbiBnZXRDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBpUHVibGljS2V5OiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYXBpUHVibGljS2V5LCBcImFwaVB1YmxpY0tleVwiKSxcbiAgICAgICAgYXBpUHJpdmF0ZUtleTogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmFwaVByaXZhdGVLZXksIFwiYXBpUHJpdmF0ZUtleVwiKSxcbiAgICAgICAgYmFzZVVybDogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmJhc2VVcmwsIFwiYmFzZVVybFwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlckNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlVXJsOiBhc3NlcnROb25FbXB0eVN0cmluZyhicm93c2VyQ29uZmlnLmJhc2VVcmwsIFwiYmFzZVVybFwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoaW5wdXQsIG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiIHx8ICFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtuYW1lfVwiIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nYCk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbn1cblxuZXhwb3J0IHsgYnJvd3NlckluaXQsIGdldEJyb3dzZXJDb25maWcsIGdldENvbmZpZywgaW5pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE0RztBQUNQO0FBQ3BEO0FBQ3lCO0FBQ3RCO0FBQ0k7QUFDYTtBQUM3Qjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZGQUFrQjs7QUFFbUI7QUFDOUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9pbmRleC5tanM/MzBiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwdWJsaWNfYXBpX2ZldGNoZXIgZnJvbSAnLi9fX2dlbmVyYXRlZF9fL3NlcnZpY2VzL2Nvb3JkaW5hdG9yL3B1YmxpYy92MS9wdWJsaWNfYXBpLmZldGNoZXIubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlDbGllbnQgfSBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuY2xpZW50Lm1qcyc7XG5leHBvcnQgeyBicm93c2VySW5pdCwgaW5pdCB9IGZyb20gJy4vY29uZmlnLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5UmVxdWVzdEVycm9yLCBzZWFsQW5kU3RhbXBSZXF1ZXN0Qm9keSB9IGZyb20gJy4vYmFzZS5tanMnO1xuZXhwb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuZXhwb3J0IHsgZ2V0V2ViQXV0aG5BdHRlc3RhdGlvbiB9IGZyb20gJy4vd2ViYXV0aG4ubWpzJztcbmV4cG9ydCB7IGNyZWF0ZUFjdGl2aXR5UG9sbGVyLCB3aXRoQXN5bmNQb2xsaW5nIH0gZnJvbSAnLi9hc3luYy5tanMnO1xuZXhwb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbi5tanMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBgVHVybmtleUFwaWAgaW5zdGVhZFxuICovXG5jb25zdCBQdWJsaWNBcGlTZXJ2aWNlID0gcHVibGljX2FwaV9mZXRjaGVyO1xuXG5leHBvcnQgeyBQdWJsaWNBcGlTZXJ2aWNlLCBwdWJsaWNfYXBpX2ZldGNoZXIgYXMgVHVybmtleUFwaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/shared.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/shared.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3NoYXJlZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxnQkFBZ0IsMkRBQTJEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvc2hhcmVkLm1qcz8wNzI0Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFR1cm5rZXlBY3Rpdml0eUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgY2F1c2UsIGFjdGl2aXR5SWQsIGFjdGl2aXR5U3RhdHVzLCBhY3Rpdml0eVR5cGUgfSA9IGlucHV0O1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUdXJua2V5QWN0aXZpdHlFcnJvclwiO1xuICAgICAgICB0aGlzLmFjdGl2aXR5SWQgPSBhY3Rpdml0eUlkID8/IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlTdGF0dXMgPSBhY3Rpdml0eVN0YXR1cyA/PyBudWxsO1xuICAgICAgICB0aGlzLmFjdGl2aXR5VHlwZSA9IGFjdGl2aXR5VHlwZSA/PyBudWxsO1xuICAgICAgICB0aGlzLmNhdXNlID0gY2F1c2UgPz8gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFR1cm5rZXlBY3Rpdml0eUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/universal.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/universal.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0E7QUFDQSxjQUFjLDhDQUFPOztBQUVKO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdW5pdmVyc2FsLm1qcz9kZDZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZldGNoIGFzIGZldGNoJDEgfSBmcm9tICdjcm9zcy1mZXRjaCc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBUaGlzIGlzIHVzZWZ1bCBmb3IgbW9ja2luZyBmZXRjaCBpbiB0ZXN0cy5cbmNvbnN0IGZldGNoID0gZmV0Y2gkMTtcblxuZXhwb3J0IHsgZmV0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXZlcnNhbC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/version.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/version.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.10.0\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC92ZXJzaW9uLm1qcz9iNWVmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFZFUlNJT04gPSBcIkB0dXJua2V5L2h0dHBAMi4xMC4wXCI7XG5cbmV4cG9ydCB7IFZFUlNJT04gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNaO0FBQzREOztBQUVwRztBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSwyRUFBa0M7QUFDeEU7QUFDQTtBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSx5RUFBZ0M7QUFDdEU7O0FBRW1EO0FBQ25EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9hcGkubWpzP2U0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVmZmVyVG9CYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5tanMnO1xuaW1wb3J0IHsgY29udmVydCB9IGZyb20gJy4vY29udmVydC5tanMnO1xuaW1wb3J0IHsgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24gfSBmcm9tICcuL3NjaGVtYS5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXR0ZXN0YXRpb24sIGNyZWRlbnRpYWwpO1xufVxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VUb0pTT04oY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBjb252ZXJ0KGJ1ZmZlclRvQmFzZTY0dXJsLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgY3JlZGVudGlhbCk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanM/NjhhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBidWZmZXJUb0Jhc2U2NHVybChidWZmZXIpIHtcbiAgICAvLyBCdWZmZXIgdG8gYmluYXJ5IHN0cmluZ1xuICAgIGNvbnN0IGJ5dGVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIG9mIGJ5dGVWaWV3KSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICB9XG4gICAgLy8gQmluYXJ5IHN0cmluZyB0byBiYXNlNjRcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKHN0cik7XG4gICAgLy8gQmFzZTY0IHRvIGJhc2U2NHVybFxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBiYXNlNjR1cmwgc3RyaW5nIGlzIHdlbGwtZm9ybWVkLlxuICAgIGNvbnN0IGJhc2U2NHVybFN0cmluZyA9IGJhc2U2NFN0cmluZ1xuICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKVxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICByZXR1cm4gYmFzZTY0dXJsU3RyaW5nO1xufVxuXG5leHBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0dXJsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanM/YzFhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBleHBvcnQgdGhlc2UgdmFsdWVzIGluIG9yZGVyIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB0byBkZWR1cGxpY2F0ZVxuLy8gc2NoZW1hIGRlZmluaXRpb25zIGluIG1pbmlmaWVkIEpTIGNvZGUuXG4vLyBUT0RPOiBQYXJjZWwgaXNuJ3QgZGVkdXBsaWNhdGluZyB0aGVzZSB2YWx1ZXMuXG5jb25zdCBjb3B5VmFsdWUgPSBcImNvcHlcIjtcbmNvbnN0IGNvbnZlcnRWYWx1ZSA9IFwiY29udmVydFwiO1xuZnVuY3Rpb24gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYSwgaW5wdXQpIHtcbiAgICBpZiAoc2NoZW1hID09PSBjb3B5VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoc2NoZW1hID09PSBjb252ZXJ0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25GbihpbnB1dCk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKCh2KSA9PiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hWzBdLCB2KSk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgc2NoZW1hRmllbGRdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5kZXJpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2NoZW1hRmllbGQuZGVyaXZlKGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0W2tleV0gPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGtleSBpbiBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZW1hRmllbGQucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmllbGRzIGNhbiBiZSBudWxsIChyYXRoZXIgdGhhbiBtaXNzaW5nIG9yIGB1bmRlZmluZWRgKSwgZS5nLiB0aGVcbiAgICAgICAgICAgIC8vIGB1c2VySGFuZGxlYCBmaWVsZCBvZiB0aGUgYEF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZWA6XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4vI2lmYWNlLWF1dGhlbnRpY2F0b3Jhc3NlcnRpb25yZXNwb25zZVxuICAgICAgICAgICAgaWYgKGlucHV0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYUZpZWxkLnNjaGVtYSwgaW5wdXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXJpdmVkKHNjaGVtYSwgZGVyaXZlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZGVyaXZlLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXF1aXJlZChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5mdW5jdGlvbiBvcHRpb25hbChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNjaGVtYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0LCBjb252ZXJ0VmFsdWUsIGNvcHlWYWx1ZSwgZGVyaXZlZCwgb3B0aW9uYWwsIHJlcXVpcmVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRTs7QUFFcEU7QUFDQTtBQUNBLDRCQUE0Qiw4REFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkRBQWlCO0FBQzdDO0FBQ0E7O0FBRXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9pbmRleC5tanM/NTk0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZXNwb25zZVRvSlNPTiwgZ2V0UmVzcG9uc2VUb0pTT04gfSBmcm9tICcuL2FwaS5tanMnO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5jcmVhdGUob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGNyZWF0ZVJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5hc3luYyBmdW5jdGlvbiBnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGdldFJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZSwgZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUY7O0FBRXJGO0FBQ0EsV0FBVyxzREFBUSxDQUFDLG1EQUFTO0FBQzdCLGtCQUFrQixzREFBUSxDQUFDLG1EQUFTO0FBQ3BDLGVBQWUsc0RBQVEsQ0FBQyxtREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHNEQUFRLENBQUMsbURBQVM7QUFDNUIsUUFBUSxzREFBUSxDQUFDLG1EQUFTO0FBQzFCLFdBQVcsc0RBQVEsQ0FBQyxzREFBWTtBQUNoQyw2QkFBNkIsc0RBQVEsQ0FBQyxtREFBUztBQUMvQyxjQUFjLHNEQUFRO0FBQ3RCLHdCQUF3QixzREFBUSxDQUFDLHNEQUFZO0FBQzdDLDJCQUEyQixzREFBUSxDQUFDLHNEQUFZO0FBQ2hELG9CQUFvQixxREFBTyxDQUFDLG1EQUFTO0FBQ3JDLEtBQUs7QUFDTCw0QkFBNEIscURBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBUSxDQUFDLG1EQUFTO0FBQzVCLFFBQVEsc0RBQVEsQ0FBQyxtREFBUztBQUMxQixXQUFXLHNEQUFRLENBQUMsc0RBQVk7QUFDaEMsNkJBQTZCLHNEQUFRLENBQUMsbURBQVM7QUFDL0MsY0FBYyxzREFBUTtBQUN0Qix3QkFBd0Isc0RBQVEsQ0FBQyxzREFBWTtBQUM3QywyQkFBMkIsc0RBQVEsQ0FBQyxzREFBWTtBQUNoRCxtQkFBbUIsc0RBQVEsQ0FBQyxzREFBWTtBQUN4QyxvQkFBb0Isc0RBQVEsQ0FBQyxzREFBWTtBQUN6QyxLQUFLO0FBQ0wsNEJBQTRCLHFEQUFPO0FBQ25DOztBQUVnRjtBQUNoRiIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcz9iNmIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVpcmVkLCBvcHRpb25hbCwgZGVyaXZlZCwgY29weVZhbHVlLCBjb252ZXJ0VmFsdWUgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcblxuY29uc3Qgc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEgPSB7XG4gICAgYXBwaWQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgYXBwaWRFeGNsdWRlOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGNyZWRQcm9wczogb3B0aW9uYWwoY29weVZhbHVlKSxcbn07XG4vLyBgbmF2aWdhdG9yLmNyZWF0ZSgpYCByZXNwb25zZVxuY29uc3QgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiA9IHtcbiAgICB0eXBlOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIGlkOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIHJhd0lkOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIGF1dGhlbnRpY2F0b3JBdHRhY2htZW50OiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIHJlc3BvbnNlOiByZXF1aXJlZCh7XG4gICAgICAgIGNsaWVudERhdGFKU09OOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBhdHRlc3RhdGlvbk9iamVjdDogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgdHJhbnNwb3J0czogZGVyaXZlZChjb3B5VmFsdWUsIChyZXNwb25zZSkgPT4gcmVzcG9uc2UuZ2V0VHJhbnNwb3J0cz8uKCkgfHwgW10pLFxuICAgIH0pLFxuICAgIGNsaWVudEV4dGVuc2lvblJlc3VsdHM6IGRlcml2ZWQoc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEsIChwa2MpID0+IHBrYy5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCkpLFxufTtcbi8vIGBuYXZpZ2F0b3IuZ2V0KClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiA9IHtcbiAgICB0eXBlOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIGlkOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIHJhd0lkOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIGF1dGhlbnRpY2F0b3JBdHRhY2htZW50OiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIHJlc3BvbnNlOiByZXF1aXJlZCh7XG4gICAgICAgIGNsaWVudERhdGFKU09OOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgc2lnbmF0dXJlOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB1c2VySGFuZGxlOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIH0pLFxuICAgIGNsaWVudEV4dGVuc2lvblJlc3VsdHM6IGRlcml2ZWQoc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEsIChwa2MpID0+IHBrYy5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCkpLFxufTtcblxuZXhwb3J0IHsgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24sIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXR0ZXN0YXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEOztBQUV4RCxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyw2REFBRztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFNO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZGO0FBQzdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4ubWpzP2Q5MWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlLCBnZXQgfSBmcm9tICcuL3dlYmF1dGhuLWpzb24vaW5kZXgubWpzJztcblxuY29uc3QgZGVmYXVsdFRpbWVvdXQgPSA1ICogNjAgKiAxMDAwOyAvLyBmaXZlIG1pbnV0ZXNcbmNvbnN0IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uID0gXCJwcmVmZXJyZWRcIjtcbmNvbnN0IGRlZmF1bHRTaWduaW5nT3B0aW9ucyA9IHtcbiAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgdGltZW91dDogZGVmYXVsdFRpbWVvdXQsXG4gICAgICAgIHVzZXJWZXJpZmljYXRpb246IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uLFxuICAgIH0sXG59O1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zKHBheWxvYWQsIHRrU2lnbmluZ09wdGlvbnMgPSBkZWZhdWx0U2lnbmluZ09wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFsbGVuZ2UgPSBhd2FpdCBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKTtcbiAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGtTaWduaW5nT3B0aW9ucyxcbiAgICAgICAgcHVibGljS2V5OiB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0U2lnbmluZ09wdGlvbnMucHVibGljS2V5LFxuICAgICAgICAgICAgLi4udGtTaWduaW5nT3B0aW9ucy5wdWJsaWNLZXksXG4gICAgICAgICAgICBjaGFsbGVuZ2UsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc2lnbmluZ09wdGlvbnM7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgY29uc3QgbWVzc2FnZUJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShwYXlsb2FkKTtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsIG1lc3NhZ2VCdWZmZXIpO1xuICAgIGNvbnN0IGhleFN0cmluZyA9IEJ1ZmZlci5mcm9tKGhhc2hCdWZmZXIpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IGhleEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGhleFN0cmluZywgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShoZXhCdWZmZXIpO1xufVxuLyogUHVsbGVkIGZyb20gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmF1dGhuLTIvI2VudW0tdHJhbnNwb3J0ICovXG5mdW5jdGlvbiBwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bShwcm90b2NvbEVudW0pIHtcbiAgICBzd2l0Y2ggKHByb3RvY29sRW51bSkge1xuICAgICAgICBjYXNlIFwiaW50ZXJuYWxcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfSU5URVJOQUxcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidXNiXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX1VTQlwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJuZmNcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfTkZDXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJsZVwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9CTEVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaHlicmlkXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0hZQlJJRFwiO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHRyYW5zcG9ydCBmb3JtYXRcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b0ludGVybmFsQXR0ZXN0YXRpb24oYXR0ZXN0YXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVkZW50aWFsSWQ6IGF0dGVzdGF0aW9uLnJhd0lkLFxuICAgICAgICBhdHRlc3RhdGlvbk9iamVjdDogYXR0ZXN0YXRpb24ucmVzcG9uc2UuYXR0ZXN0YXRpb25PYmplY3QsXG4gICAgICAgIGNsaWVudERhdGFKc29uOiBhdHRlc3RhdGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgdHJhbnNwb3J0czogYXR0ZXN0YXRpb24ucmVzcG9uc2UudHJhbnNwb3J0cy5tYXAocHJvdG9jb2xUcmFuc3BvcnRFbnVtVG9JbnRlcm5hbEVudW0pLFxuICAgIH07XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJBdXRobkFzc2VydGlvbihwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgd2ViQXV0aG5TdXBwb3J0ZWQgPSBoYXNXZWJBdXRoblN1cHBvcnQoKTtcbiAgICBpZiAoIXdlYkF1dGhuU3VwcG9ydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlYmF1dGhuIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IGF3YWl0IGdldENyZWRlbnRpYWxSZXF1ZXN0T3B0aW9ucyhwYXlsb2FkLCBvcHRpb25zKTtcbiAgICBjb25zdCBjbGllbnRHZXRSZXN1bHQgPSBhd2FpdCBnZXQoc2lnbmluZ09wdGlvbnMpO1xuICAgIGNvbnN0IGFzc2VydGlvbiA9IGNsaWVudEdldFJlc3VsdC50b0pTT04oKTtcbiAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IGFzc2VydGlvbi5yZXNwb25zZS5hdXRoZW50aWNhdG9yRGF0YSxcbiAgICAgICAgY2xpZW50RGF0YUpzb246IGFzc2VydGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgY3JlZGVudGlhbElkOiBhc3NlcnRpb24uaWQsXG4gICAgICAgIHNpZ25hdHVyZTogYXNzZXJ0aW9uLnJlc3BvbnNlLnNpZ25hdHVyZSxcbiAgICB9O1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGFtcCk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJBdXRobkF0dGVzdGF0aW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWJBdXRoblN1cHBvcnRlZCA9IGhhc1dlYkF1dGhuU3VwcG9ydCgpO1xuICAgIGlmICghd2ViQXV0aG5TdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2ViYXV0aG4gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZShvcHRpb25zKTtcbiAgICByZXR1cm4gdG9JbnRlcm5hbEF0dGVzdGF0aW9uKHJlcy50b0pTT04oKSk7XG59XG4vLyBgaGFzV2ViQXV0aG5TdXBwb3J0YCBjaGVja3MgZm9yIGJhcmVib25lcyB3ZWJhdXRobiBzdXBwb3J0LlxuLy8gRm9yIGFkZGl0aW9uYWwgZGV0YWlscyBhbmQgZ3JhbnVsYXIgc2V0dGluZ3MsIHNlZTpcbi8vIGh0dHBzOi8vd2ViLmRldi9hcnRpY2xlcy9wYXNza2V5LWZvcm0tYXV0b2ZpbGwjZmVhdHVyZS1kZXRlY3Rpb24sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QdWJsaWNLZXlDcmVkZW50aWFsXG5mdW5jdGlvbiBoYXNXZWJBdXRoblN1cHBvcnQoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LlB1YmxpY0tleUNyZWRlbnRpYWw7XG59XG5cbmV4cG9ydCB7IGdldFdlYkF1dGhuQXNzZXJ0aW9uLCBnZXRXZWJBdXRobkF0dGVzdGF0aW9uLCBwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViYXV0aG4ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/iframe-stamper/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IframeEventType: () => (/* binding */ IframeEventType),\n/* harmony export */   IframeStamper: () => (/* binding */ IframeStamper),\n/* harmony export */   KeyFormat: () => (/* binding */ KeyFormat)\n/* harmony export */ });\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// Set of constants for event types expected to be sent and received between a parent page and its iframe.\nvar IframeEventType;\n(function (IframeEventType) {\n    // Event sent by the iframe to its parent to indicate readiness.\n    // Value: the iframe public key\n    IframeEventType[\"PublicKeyReady\"] = \"PUBLIC_KEY_READY\";\n    // Event sent by the parent to inject a credential bundle (for recovery or auth) into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectCredentialBundle\"] = \"INJECT_CREDENTIAL_BUNDLE\";\n    // Event sent by the parent to inject a private key export bundle into the iframe.\n    // Value: the bundle to inject\n    // Key Format (optional): the key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    // Public Key (optional): the public key of the exported private key. Required when the key format is SOLANA.\n    IframeEventType[\"InjectKeyExportBundle\"] = \"INJECT_KEY_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject a wallet export bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectWalletExportBundle\"] = \"INJECT_WALLET_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject an import bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectImportBundle\"] = \"INJECT_IMPORT_BUNDLE\";\n    // Event sent by the parent to extract an encrypted wallet bundle from the iframe.\n    // Value: none\n    IframeEventType[\"ExtractWalletEncryptedBundle\"] = \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to extract an encrypted private key bundle from the iframe.\n    // Value: none\n    // Key Format (optional): the key format to decode the private key in before it's encrypted for import: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    IframeEventType[\"ExtractKeyEncryptedBundle\"] = \"EXTRACT_KEY_ENCRYPTED_BUNDLE\";\n    // Event sent by the iframe to its parent when `InjectBundle` is successful\n    // Value: true (boolean)\n    IframeEventType[\"BundleInjected\"] = \"BUNDLE_INJECTED\";\n    // Event sent by the iframe to its parent when `ExtractEncryptedBundle` is successful\n    // Value: the bundle encrypted in the iframe\n    IframeEventType[\"EncryptedBundleExtracted\"] = \"ENCRYPTED_BUNDLE_EXTRACTED\";\n    // Event sent by the parent page to request a signature\n    // Value: payload to sign\n    IframeEventType[\"StampRequest\"] = \"STAMP_REQUEST\";\n    // Event sent by the iframe to communicate the result of a stamp operation.\n    // Value: signed payload\n    IframeEventType[\"Stamp\"] = \"STAMP\";\n    // Event sent by the iframe to communicate an error\n    // Value: serialized error\n    IframeEventType[\"Error\"] = \"ERROR\";\n})(IframeEventType || (IframeEventType = {}));\n// Set of constants for private key formats. These formats map to the encoding type used on a private key before encrypting and importing it\n// or after exporting it and decrypting it.\nvar KeyFormat;\n(function (KeyFormat) {\n    // 64 hexadecimal digits. Key format used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum and Tron keys\n    KeyFormat[\"Hexadecimal\"] = \"HEXADECIMAL\";\n    // Key format used by Phantom and Solflare for Solana keys\n    KeyFormat[\"Solana\"] = \"SOLANA\";\n})(KeyFormat || (KeyFormat = {}));\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n * Creating a stamper inserts an iframe in the current page.\n */\nclass IframeStamper {\n    /**\n     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.\n     * Call `.init()` to insert the iframe element in the DOM.\n     */\n    constructor(config) {\n        if (typeof window === \"undefined\") {\n            throw new Error(\"Cannot initialize iframe in non-browser environment\");\n        }\n        if (!config.iframeContainer) {\n            throw new Error(\"Iframe container cannot be found\");\n        }\n        this.container = config.iframeContainer;\n        if (this.container.querySelector(`#${config.iframeElementId}`)) {\n            throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);\n        }\n        let iframe = window.document.createElement(\"iframe\");\n        iframe.id = config.iframeElementId;\n        iframe.src = config.iframeUrl;\n        this.iframe = iframe;\n        const iframeUrl = new URL(config.iframeUrl);\n        this.iframeOrigin = iframeUrl.origin;\n        // This is populated once the iframe is ready. Call `.init()` to kick off DOM insertion!\n        this.iframePublicKey = null;\n    }\n    /**\n     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key\n     */\n    async init() {\n        this.container.appendChild(this.iframe);\n        return new Promise((resolve, _reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out\n                    return;\n                }\n                if (event.data?.type === IframeEventType.PublicKeyReady) {\n                    this.iframePublicKey = event.data[\"value\"];\n                    resolve(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Removes the iframe from the DOM\n     */\n    clear() {\n        this.iframe.remove();\n    }\n    /**\n     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.\n     */\n    publicKey() {\n        return this.iframePublicKey;\n    }\n    /**\n     * Function to inject a new credential into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during recovery and auth flows.\n     */\n    async injectCredentialBundle(bundle) {\n        return new Promise((resolve, reject) => {\n            this.iframe.contentWindow?.postMessage({\n                type: IframeEventType.InjectCredentialBundle,\n                value: bundle,\n            }, \"*\");\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key export flow.\n     */\n    async injectKeyExportBundle(bundle, keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectKeyExportBundle,\n            value: bundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet export flow.\n     */\n    async injectWalletExportBundle(bundle) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectWalletExportBundle,\n            value: bundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an import bundle into the iframe\n     * This is used to initiate either the wallet import flow or the private key import flow.\n     */\n    async injectImportBundle(bundle) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectImportBundle,\n            value: bundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet import flow.\n     */\n    async extractWalletEncryptedBundle() {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractWalletEncryptedBundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key import flow.\n     */\n    async extractKeyEncryptedBundle(keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractKeyEncryptedBundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to sign a payload with the underlying iframe\n     */\n    async stamp(payload) {\n        if (this.iframePublicKey === null) {\n            throw new Error(\"null iframe public key. Have you called/awaited .init()?\");\n        }\n        const iframeOrigin = this.iframeOrigin;\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.StampRequest,\n            value: payload,\n        }, \"*\");\n        return new Promise(function (resolve, reject) {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.Stamp) {\n                    resolve({\n                        stampHeaderName: stampHeaderName,\n                        stampHeaderValue: event.data[\"value\"],\n                    });\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebauthnStamper: () => (/* binding */ WebauthnStamper)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js\");\n\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for a webauthn stamp\nconst stampHeaderName = \"X-Stamp-Webauthn\";\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass WebauthnStamper {\n    constructor(config) {\n        this.rpId = config.rpId;\n        this.timeout = config.timeout || defaultTimeout;\n        this.userVerification = config.userVerification || defaultUserVerification;\n        this.allowCredentials = config.allowCredentials || [];\n    }\n    async stamp(payload) {\n        const challenge = getChallengeFromPayload(payload);\n        const signingOptions = {\n            publicKey: {\n                rpId: this.rpId,\n                challenge: challenge,\n                allowCredentials: this.allowCredentials,\n                timeout: this.timeout,\n                userVerification: this.userVerification,\n            },\n        };\n        const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n        const assertion = clientGetResult.toJSON();\n        const stamp = {\n            authenticatorData: assertion.response.authenticatorData,\n            clientDataJson: assertion.response.clientDataJSON,\n            credentialId: assertion.id,\n            signature: assertion.response.signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: JSON.stringify(stamp),\n        };\n    }\n}\nfunction getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(messageBuffer);\n    const hexString = _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdEO0FBQ1A7QUFDSzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQ0FBc0MsNkRBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDREQUFNO0FBQzdCLHNCQUFzQixrREFBTTtBQUM1QixzQkFBc0Isa0RBQU07QUFDNUI7QUFDQTs7QUFFMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC9pbmRleC5tanM/ZWFjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXQgfSBmcm9tICcuL3dlYmF1dGhuLWpzb24vaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1ZmZlciB9IGZyb20gJy4vdW5pdmVyc2FsLm1qcyc7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTI1Nic7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBIZWFkZXIgbmFtZSBmb3IgYSB3ZWJhdXRobiBzdGFtcFxuY29uc3Qgc3RhbXBIZWFkZXJOYW1lID0gXCJYLVN0YW1wLVdlYmF1dGhuXCI7XG5jb25zdCBkZWZhdWx0VGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIGZpdmUgbWludXRlc1xuY29uc3QgZGVmYXVsdFVzZXJWZXJpZmljYXRpb24gPSBcInByZWZlcnJlZFwiO1xuLyoqXG4gKiBTdGFtcGVyIHRvIHVzZSB3aXRoIGBAdHVybmtleS9odHRwYCdzIGBUdXJua2V5Q2xpZW50YFxuICovXG5jbGFzcyBXZWJhdXRoblN0YW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLnJwSWQgPSBjb25maWcucnBJZDtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQgfHwgZGVmYXVsdFRpbWVvdXQ7XG4gICAgICAgIHRoaXMudXNlclZlcmlmaWNhdGlvbiA9IGNvbmZpZy51c2VyVmVyaWZpY2F0aW9uIHx8IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmFsbG93Q3JlZGVudGlhbHMgPSBjb25maWcuYWxsb3dDcmVkZW50aWFscyB8fCBbXTtcbiAgICB9XG4gICAgYXN5bmMgc3RhbXAocGF5bG9hZCkge1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2UgPSBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKTtcbiAgICAgICAgY29uc3Qgc2lnbmluZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgICAgICAgICBycElkOiB0aGlzLnJwSWQsXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2UsXG4gICAgICAgICAgICAgICAgYWxsb3dDcmVkZW50aWFsczogdGhpcy5hbGxvd0NyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHRoaXMudGltZW91dCxcbiAgICAgICAgICAgICAgICB1c2VyVmVyaWZpY2F0aW9uOiB0aGlzLnVzZXJWZXJpZmljYXRpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGllbnRHZXRSZXN1bHQgPSBhd2FpdCBnZXQoc2lnbmluZ09wdGlvbnMpO1xuICAgICAgICBjb25zdCBhc3NlcnRpb24gPSBjbGllbnRHZXRSZXN1bHQudG9KU09OKCk7XG4gICAgICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IGFzc2VydGlvbi5yZXNwb25zZS5hdXRoZW50aWNhdG9yRGF0YSxcbiAgICAgICAgICAgIGNsaWVudERhdGFKc29uOiBhc3NlcnRpb24ucmVzcG9uc2UuY2xpZW50RGF0YUpTT04sXG4gICAgICAgICAgICBjcmVkZW50aWFsSWQ6IGFzc2VydGlvbi5pZCxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogYXNzZXJ0aW9uLnJlc3BvbnNlLnNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyTmFtZTogc3RhbXBIZWFkZXJOYW1lLFxuICAgICAgICAgICAgc3RhbXBIZWFkZXJWYWx1ZTogSlNPTi5zdHJpbmdpZnkoc3RhbXApLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBtZXNzYWdlQnVmZmVyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHBheWxvYWQpO1xuICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBzaGEyNTYobWVzc2FnZUJ1ZmZlcik7XG4gICAgY29uc3QgaGV4U3RyaW5nID0gYnVmZmVyLmZyb20oaGFzaEJ1ZmZlcikudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgaGV4QnVmZmVyID0gYnVmZmVyLmZyb20oaGV4U3RyaW5nLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhleEJ1ZmZlcik7XG59XG5cbmV4cG9ydCB7IFdlYmF1dGhuU3RhbXBlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buffer: () => (/* binding */ buffer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n\n\n/// <reference lib=\"dom\" />\nlet buffer;\nif (typeof globalThis?.Buffer !== \"undefined\") {\n    buffer = globalThis.Buffer;\n}\nelse {\n    buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n}\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMENBQU07QUFDbkI7O0FBRWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3QvdW5pdmVyc2FsLm1qcz80MzkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5sZXQgYnVmZmVyO1xuaWYgKHR5cGVvZiBnbG9iYWxUaGlzPy5CdWZmZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBidWZmZXIgPSBnbG9iYWxUaGlzLkJ1ZmZlcjtcbn1cbmVsc2Uge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlcjtcbn1cblxuZXhwb3J0IHsgYnVmZmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml2ZXJzYWwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ1o7QUFDd0I7O0FBRWhFO0FBQ0EsV0FBVyxxREFBTyxDQUFDLDZEQUFpQixFQUFFLHlFQUFnQztBQUN0RTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2FwaS5tanM/Y2NmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5pbXBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9IGZyb20gJy4vc2NoZW1hLm1qcyc7XG5cbmZ1bmN0aW9uIGdldFJlc3BvbnNlVG9KU09OKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gY29udmVydChidWZmZXJUb0Jhc2U2NHVybCwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24sIGNyZWRlbnRpYWwpO1xufVxuXG5leHBvcnQgeyBnZXRSZXNwb25zZVRvSlNPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanM/NTAyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBidWZmZXJUb0Jhc2U2NHVybChidWZmZXIpIHtcbiAgICAvLyBCdWZmZXIgdG8gYmluYXJ5IHN0cmluZ1xuICAgIGNvbnN0IGJ5dGVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIG9mIGJ5dGVWaWV3KSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICB9XG4gICAgLy8gQmluYXJ5IHN0cmluZyB0byBiYXNlNjRcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKHN0cik7XG4gICAgLy8gQmFzZTY0IHRvIGJhc2U2NHVybFxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBiYXNlNjR1cmwgc3RyaW5nIGlzIHdlbGwtZm9ybWVkLlxuICAgIGNvbnN0IGJhc2U2NHVybFN0cmluZyA9IGJhc2U2NFN0cmluZ1xuICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKVxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICByZXR1cm4gYmFzZTY0dXJsU3RyaW5nO1xufVxuXG5leHBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0dXJsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanM/MzAxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBleHBvcnQgdGhlc2UgdmFsdWVzIGluIG9yZGVyIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB0byBkZWR1cGxpY2F0ZVxuLy8gc2NoZW1hIGRlZmluaXRpb25zIGluIG1pbmlmaWVkIEpTIGNvZGUuXG4vLyBUT0RPOiBQYXJjZWwgaXNuJ3QgZGVkdXBsaWNhdGluZyB0aGVzZSB2YWx1ZXMuXG5jb25zdCBjb3B5VmFsdWUgPSBcImNvcHlcIjtcbmNvbnN0IGNvbnZlcnRWYWx1ZSA9IFwiY29udmVydFwiO1xuZnVuY3Rpb24gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYSwgaW5wdXQpIHtcbiAgICBpZiAoc2NoZW1hID09PSBjb3B5VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoc2NoZW1hID09PSBjb252ZXJ0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25GbihpbnB1dCk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKCh2KSA9PiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hWzBdLCB2KSk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgc2NoZW1hRmllbGRdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5kZXJpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2NoZW1hRmllbGQuZGVyaXZlKGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0W2tleV0gPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGtleSBpbiBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZW1hRmllbGQucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmllbGRzIGNhbiBiZSBudWxsIChyYXRoZXIgdGhhbiBtaXNzaW5nIG9yIGB1bmRlZmluZWRgKSwgZS5nLiB0aGVcbiAgICAgICAgICAgIC8vIGB1c2VySGFuZGxlYCBmaWVsZCBvZiB0aGUgYEF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZWA6XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4vI2lmYWNlLWF1dGhlbnRpY2F0b3Jhc3NlcnRpb25yZXNwb25zZVxuICAgICAgICAgICAgaWYgKGlucHV0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYUZpZWxkLnNjaGVtYSwgaW5wdXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXJpdmVkKHNjaGVtYSwgZGVyaXZlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZGVyaXZlLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXF1aXJlZChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5mdW5jdGlvbiBvcHRpb25hbChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNjaGVtYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0LCBjb252ZXJ0VmFsdWUsIGNvcHlWYWx1ZSwgZGVyaXZlZCwgb3B0aW9uYWwsIHJlcXVpcmVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\");\n\n\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDOztBQUU5QztBQUNBO0FBQ0EsNEJBQTRCLDJEQUFpQjtBQUM3QztBQUNBOztBQUVlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2luZGV4Lm1qcz8xNWRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFJlc3BvbnNlVG9KU09OIH0gZnJvbSAnLi9hcGkubWpzJztcblxuYXN5bmMgZnVuY3Rpb24gZ2V0KG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IChhd2FpdCBuYXZpZ2F0b3IuY3JlZGVudGlhbHMuZ2V0KG9wdGlvbnMpKTtcbiAgICByZXNwb25zZS50b0pTT04gPSAoKSA9PiBnZXRSZXNwb25zZVRvSlNPTihyZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5leHBvcnQgeyBnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRjs7QUFFckY7QUFDQSxXQUFXLHNEQUFRLENBQUMsbURBQVM7QUFDN0Isa0JBQWtCLHNEQUFRLENBQUMsbURBQVM7QUFDcEMsZUFBZSxzREFBUSxDQUFDLG1EQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsbUJBQW1CLHNEQUFRLENBQUMsc0RBQVk7QUFDeEMsb0JBQW9CLHNEQUFRLENBQUMsc0RBQVk7QUFDekMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQzs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanM/ZTdjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXF1aXJlZCwgb3B0aW9uYWwsIGRlcml2ZWQsIGNvcHlWYWx1ZSwgY29udmVydFZhbHVlIH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5cbmNvbnN0IHNpbXBsaWZpZWRDbGllbnRFeHRlbnNpb25SZXN1bHRzU2NoZW1hID0ge1xuICAgIGFwcGlkOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGFwcGlkRXhjbHVkZTogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICBjcmVkUHJvcHM6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG59O1xuLy8gYG5hdmlnYXRvci5nZXQoKWAgcmVzcG9uc2VcbmNvbnN0IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBzaWduYXR1cmU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHVzZXJIYW5kbGU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuXG5leHBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQSwwREFBMEQsRUFBRTtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLGtCQUFrQixTQUFTO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsSUFBSTtBQUNyRjtBQUNBO0FBQ3FEO0FBQ3JELGlCQUFpQjtBQUNqQixpRUFBZSxNQUFNLEVBQUM7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanM/YzhjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgcG9zaXRpdmUgaW50ZWdlciBleHBlY3RlZCwgbm90ICR7bn1gKTtcbn1cbmZ1bmN0aW9uIGJvb2woYikge1xuICAgIGlmICh0eXBlb2YgYiAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJvb2xlYW4gZXhwZWN0ZWQsIG5vdCAke2J9YCk7XG59XG4vLyBjb3BpZWQgZnJvbSB1dGlsc1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXMoYSkge1xuICAgIHJldHVybiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHxcbiAgICAgICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIWlzQnl0ZXMoYikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCcpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVpbnQ4QXJyYXkgZXhwZWN0ZWQgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGhhc2goaCkge1xuICAgIGlmICh0eXBlb2YgaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoLmJsb2NrTGVuKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydCB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX21kLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThDO0FBQ1M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08scUJBQXFCLDJDQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscURBQVU7QUFDOUI7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxnQkFBZ0IseUJBQXlCO0FBQ3pDLGVBQWUsa0RBQU87QUFDdEI7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0MsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxRQUFRLGtEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixjQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxREFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFEQUFxRDtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX21kLmpzPzFmMTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzLCBvdXRwdXQgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgY3JlYXRlVmlldywgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gUG9seWZpbGwgZm9yIFNhZmFyaSAxNFxuZnVuY3Rpb24gc2V0QmlnVWludDY0KHZpZXcsIGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpZXcuc2V0QmlnVWludDY0KGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKTtcbiAgICBjb25zdCBfMzJuID0gQmlnSW50KDMyKTtcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcbiAgICBjb25zdCB3aCA9IE51bWJlcigodmFsdWUgPj4gXzMybikgJiBfdTMyX21heCk7XG4gICAgY29uc3Qgd2wgPSBOdW1iZXIodmFsdWUgJiBfdTMyX21heCk7XG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcbiAgICBjb25zdCBsID0gaXNMRSA/IDAgOiA0O1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBoLCB3aCwgaXNMRSk7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcbn1cbi8vIENob2ljZTogYSA/IGIgOiBjXG5leHBvcnQgY29uc3QgQ2hpID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAofmEgJiBjKTtcbi8vIE1ham9yaXR5IGZ1bmN0aW9uLCB0cnVlIGlmIGFueSB0d28gaW5wdXN0IGlzIHRydWVcbmV4cG9ydCBjb25zdCBNYWogPSAoYSwgYiwgYykgPT4gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuLyoqXG4gKiBNZXJrbGUtRGFtZ2FyZCBoYXNoIGNvbnN0cnVjdGlvbiBiYXNlIGNsYXNzLlxuICogQ291bGQgYmUgdXNlZCB0byBjcmVhdGUgTUQ1LCBSSVBFTUQsIFNIQTEsIFNIQTIuXG4gKi9cbmV4cG9ydCBjbGFzcyBIYXNoTUQgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBjcmVhdGVWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBjb25zdCB7IHZpZXcsIGJ1ZmZlciwgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIGRhdGEgPSB0b0J5dGVzKGRhdGEpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICAvLyBGYXN0IHBhdGg6IHdlIGhhdmUgYXQgbGVhc3Qgb25lIGJsb2NrIGluIGlucHV0LCBjYXN0IGl0IHRvIHZpZXcgYW5kIHByb2Nlc3NcbiAgICAgICAgICAgIGlmICh0YWtlID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gY3JlYXRlVmlldyhkYXRhKTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgYmxvY2tMZW4gPD0gbGVuIC0gcG9zOyBwb3MgKz0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyhkYXRhVmlldywgcG9zKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoZGF0YS5zdWJhcnJheShwb3MsIHBvcyArIHRha2UpLCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSB0YWtlO1xuICAgICAgICAgICAgcG9zICs9IHRha2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yb3VuZENsZWFuKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIG91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpblxuICAgICAgICAvLyBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dHB1dExlbjtcbiAgICAgICAgLy8gTk9URTogd2UgZG8gZGl2aXNpb24gYnkgNCBsYXRlciwgd2hpY2ggc2hvdWxkIGJlIGZ1c2VkIGluIHNpbmdsZSBvcCB3aXRoIG1vZHVsbyBieSBKSVRcbiAgICAgICAgaWYgKGxlbiAlIDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gc2hvdWxkIGJlIGFsaWduZWQgdG8gMzJiaXQnKTtcbiAgICAgICAgY29uc3Qgb3V0TGVuID0gbGVuIC8gNDtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAob3V0TGVuID4gc3RhdGUubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXG4gICAgICAgICAgICBvdmlldy5zZXRVaW50MzIoNCAqIGksIHN0YXRlW2ldLCBpc0xFKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8oYnVmZmVyKTtcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIGJ1ZmZlciwgbGVuZ3RoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBwb3MgfSA9IHRoaXM7XG4gICAgICAgIHRvLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdG8ucG9zID0gcG9zO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcbiAgICAgICAgICAgIHRvLmJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9tZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUMzQixlQUFlLDJNQUFFLFdBQVcsMk1BQUUsaUJBQWlCLDBOQUFpQixHQUFHLGtEQUFZO0FBQ3RGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzP2M4NmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBTZWUgdXRpbHMudHMgZm9yIGRldGFpbHMuXG4vLyBUaGUgZmlsZSB3aWxsIHRocm93IG9uIG5vZGUuanMgMTQgYW5kIGVhcmxpZXIuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBuYyBmcm9tICdub2RlOmNyeXB0byc7XG5leHBvcnQgY29uc3QgY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuYyA/IG5jLndlYmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@turnkey\"), __webpack_require__.e(\"vendor-chunks/sha256-uint8array\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RDs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4TUFBeUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdOQUEwQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdSQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwRUFBdUI7QUFDckQ7QUFDQTtBQUNBOztBQUV5QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzPzI1ODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBIZWFkZXIgbmFtZSBmb3IgYW4gQVBJIGtleSBzdGFtcFxuY29uc3Qgc3RhbXBIZWFkZXJOYW1lID0gXCJYLVN0YW1wXCI7XG4vLyBgd2luZG93LmRvY3VtZW50YCBlbnN1cmVzIHRoYXQgd2UncmUgaW4gYSBicm93c2VyIGNvbnRleHRcbi8vIGFuZCBgY3J5cHRvLnN1YnRsZWAgZW5zdXJlcyB0aGF0IGl0IHN1cHBvcnRzIHRoZSB3ZWIgY3J5cHRvIEFQSXNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbmNvbnN0IGlzQ3J5cHRvRW5hYmxlZEJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgY3J5cHRvLnN1YnRsZSAhPT0gXCJ1bmRlZmluZWRcIjtcbi8vIFdlIGNoZWNrIGBwcm9jZXNzLnZlcnNpb25zLm5vZGVgXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbmNvbnN0IGlzTm9kZSA9IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucyAhPSBudWxsICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9IG51bGw7XG4vKipcbiAqIFNpZ25hdHVyZSBmdW5jdGlvbiBhYnN0cmFjdGluZyB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBOb2RlSlMgYW5kIHdlYiBlbnZpcm9ubWVudHMgZm9yIHNpZ25pbmcgd2l0aCBBUEkga2V5cy5cbiAqL1xuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBpZiAoaXNDcnlwdG9FbmFibGVkQnJvd3Nlcikge1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi93ZWJjcnlwdG8ubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZSkge1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi9ub2RlY3J5cHRvLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBOb2RlSlMgb3Igd2ViIGNyeXB0byBhdCBvdXIgZGlzcG9zYWwsIGRlZmF1bHQgdG8gcHVyZSBKUyBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIGZvciBvbGQgYnJvd3NlcnMgYW5kIHJlYWN0IG5hdGl2ZSBlbnZpcm9ubWVudHNcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vcHVyZWpzLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbn07XG4vKipcbiAqIFN0YW1wZXIgdG8gdXNlIHdpdGggYEB0dXJua2V5L2h0dHBgJ3MgYFR1cm5rZXlDbGllbnRgXG4gKi9cbmNsYXNzIEFwaUtleVN0YW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmFwaVB1YmxpY0tleSA9IGNvbmZpZy5hcGlQdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuYXBpUHJpdmF0ZUtleSA9IGNvbmZpZy5hcGlQcml2YXRlS2V5O1xuICAgIH1cbiAgICBhc3luYyBzdGFtcChwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNpZ25XaXRoQXBpS2V5KHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogdGhpcy5hcGlQdWJsaWNLZXksXG4gICAgICAgICAgICBwcml2YXRlS2V5OiB0aGlzLmFwaVByaXZhdGVLZXksXG4gICAgICAgICAgICBjb250ZW50OiBwYXlsb2FkLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3RhbXAgPSB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHRoaXMuYXBpUHVibGljS2V5LFxuICAgICAgICAgICAgc2NoZW1lOiBcIlNJR05BVFVSRV9TQ0hFTUVfVEtfQVBJX1AyNTZcIixcbiAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhbXBIZWFkZXJOYW1lOiBzdGFtcEhlYWRlck5hbWUsXG4gICAgICAgICAgICBzdGFtcEhlYWRlclZhbHVlOiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhKU09OLnN0cmluZ2lmeShzdGFtcCkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQXBpS2V5U3RhbXBlciwgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3VCOztBQUV4RDtBQUNBLFlBQVksaUNBQWlDO0FBQzdDLDZCQUE2QixvREFBdUI7QUFDcEQ7QUFDQTtBQUNBLGFBQWEscUVBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDhDQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L25vZGVjcnlwdG8ubWpzPzgxNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGVudCwgcHVibGljS2V5LCBwcml2YXRlS2V5IH0gPSBpbnB1dDtcbiAgICBjb25zdCBwcml2YXRlS2V5T2JqZWN0ID0gY3J5cHRvLmNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0tIHRoZSBrZXkgY2FuIGJlIGEgSldLIG9iamVjdCBzaW5jZSBOb2RlIHYxNS4xMi4wXG4gICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvY3J5cHRvLmh0bWwjY3J5cHRvY3JlYXRlcHJpdmF0ZWtleWtleVxuICAgICAgICBrZXk6IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soe1xuICAgICAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleDogcHJpdmF0ZUtleSxcbiAgICAgICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICAgICAgfSksXG4gICAgICAgIGZvcm1hdDogXCJqd2tcIixcbiAgICB9KTtcbiAgICBjb25zdCBzaWduID0gY3J5cHRvLmNyZWF0ZVNpZ24oXCJTSEEyNTZcIik7XG4gICAgc2lnbi53cml0ZShCdWZmZXIuZnJvbShjb250ZW50KSk7XG4gICAgc2lnbi5lbmQoKTtcbiAgICByZXR1cm4gc2lnbi5zaWduKHByaXZhdGVLZXlPYmplY3QsIFwiaGV4XCIpO1xufTtcblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVjcnlwdG8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(rsc)/./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0s7QUFDVzs7QUFFMUQ7QUFDQSxzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQSw0QkFBNEIsd0VBQXFCO0FBQ2pEO0FBQ0EsbUVBQW1FLGdCQUFnQixRQUFRLGdCQUFnQjtBQUMzRztBQUNBLGlCQUFpQiw2REFBVTtBQUMzQixzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3B1cmVqcy5tanM/Mzk0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwMjU2IH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9wMjU2JztcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdzaGEyNTYtdWludDhhcnJheSc7XG5pbXBvcnQgeyB1aW50OEFycmF5VG9IZXhTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgcHVibGljS2V5ID0gcDI1Ni5nZXRQdWJsaWNLZXkoaW5wdXQucHJpdmF0ZUtleSwgdHJ1ZSk7XG4gICAgLy8gUHVibGljIGtleSBpbiB0aGUgdXN1YWwgMDIgb3IgMDMgKyA2NCBoZXggZGlnaXRzXG4gICAgY29uc3QgcHVibGljS2V5U3RyaW5nID0gdWludDhBcnJheVRvSGV4U3RyaW5nKHB1YmxpY0tleSk7XG4gICAgaWYgKHB1YmxpY0tleVN0cmluZyAhPSBpbnB1dC5wdWJsaWNLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgQVBJIGtleS4gRXhwZWN0ZWQgdG8gZ2V0IHB1YmxpYyBrZXkgJHtpbnB1dC5wdWJsaWNLZXl9LCBnb3QgJHtwdWJsaWNLZXlTdHJpbmd9YCk7XG4gICAgfVxuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCkudXBkYXRlKGlucHV0LmNvbnRlbnQpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHAyNTYuc2lnbihoYXNoLCBpbnB1dC5wcml2YXRlS2V5KTtcbiAgICByZXR1cm4gc2lnbmF0dXJlLnRvREVSSGV4KCk7XG59O1xuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVyZWpzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3RpbmsvYnl0ZXMubWpzPzRiYWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9ieXRlcy50c1xuICpcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG4vKipcbiAqIENvbnZlcnRzIHRoZSBoZXggc3RyaW5nIHRvIGEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gaGV4IHRoZSBpbnB1dFxuICogQHJldHVybiB0aGUgYnl0ZSBhcnJheSBvdXRwdXRcbiAqIEB0aHJvd3MgeyFFcnJvcn1cbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gZnJvbUhleChoZXgpIHtcbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIgIT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIG11bHRpcGxlIG9mIDJcIik7XG4gICAgfVxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBhcnJbaSAvIDJdID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyhpLCBpICsgMiksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBieXRlIGFycmF5IHRvIGhleC5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIGJ5dGUgYXJyYXkgaW5wdXRcbiAqIEByZXR1cm4gaGV4IHRoZSBvdXRwdXRcbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gdG9IZXgoYnl0ZXMpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGhleEJ5dGUgPSBieXRlc1tpXS50b1N0cmluZygxNik7XG4gICAgICAgIHJlc3VsdCArPSBoZXhCeXRlLmxlbmd0aCA+IDEgPyBoZXhCeXRlIDogXCIwXCIgKyBoZXhCeXRlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBCYXNlNjQgZW5jb2RlIGEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIGJ5dGUgYXJyYXkgaW5wdXRcbiAqIEBwYXJhbSBvcHRfd2ViU2FmZSBUcnVlIGluZGljYXRlcyB3ZSBzaG91bGQgdXNlIHRoZSBhbHRlcm5hdGl2ZVxuICogICAgIGFscGhhYmV0LCB3aGljaCBkb2VzIG5vdCByZXF1aXJlIGVzY2FwaW5nIGZvciB1c2UgaW4gVVJMcy5cbiAqIEByZXR1cm4gYmFzZTY0IG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0Jhc2U2NChieXRlcywgb3B0X3dlYlNhZmUpIHtcbiAgICBjb25zdCBlbmNvZGVkID0gYnRvYShcbiAgICAvKiBwYWRkaW5nICovXG4gICAgdG9CeXRlU3RyaW5nKGJ5dGVzKSkucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICBpZiAob3B0X3dlYlNhZmUpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZWQucmVwbGFjZSgvXFwrL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCJfXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbi8qKlxuICogVHVybnMgYSBieXRlIGFycmF5IGludG8gdGhlIHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcbiAqIGNoYXJhY3RlcnMgdG8gd2hpY2ggdGhlIG51bWJlcnMgY29ycmVzcG9uZC4gRWFjaCBieXRlIGlzIGNvcnJlc3BvbmRpbmcgdG8gYVxuICogY2hhcmFjdGVyLiBEb2VzIG5vdCBzdXBwb3J0IG11bHRpLWJ5dGUgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmdcbiAqICAgICBjaGFyYWN0ZXJzLlxuICogQHJldHVybiBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiB0b0J5dGVTdHJpbmcoYnl0ZXMpIHtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IHsgZnJvbUhleCwgdG9CYXNlNjQsIHRvQnl0ZVN0cmluZywgdG9IZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i) {\n    let input = i.toString(16);\n    // If necessary, prepend leading zero to ensure that input length is even.\n    input = input.length % 2 === 0 ? input : \"0\" + input;\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n * Decodes a public key in _compressed_ format.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    if (point.length !== 1 + fieldSize) {\n        throw new Error(\"compressed point has wrong length\");\n    }\n    if (point[0] !== 2 && point[0] !== 3) {\n        throw new Error(\"invalid format\");\n    }\n    const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n    const x = byteArrayToInteger(point.subarray(1, point.length));\n    const p = getModulus();\n    if (x < BigInt(0) || x >= p) {\n        throw new Error(\"x is out of range\");\n    }\n    const y = getY(x, lsb);\n    const result = {\n        kty: \"EC\",\n        crv: \"P-256\",\n        x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x), /* websafe */ true),\n        y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y), /* websafe */ true),\n        ext: true,\n    };\n    return result;\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)(hexStringToUint8Array(compressedPublicKeyHex));\n    jwk.d = hexStringToBase64urlString(uncompressedPrivateKeyHex);\n    return jwk;\n}\nfunction hexStringToUint8Array(input) {\n    if (input.length === 0 ||\n        input.length % 2 !== 0 ||\n        /[^a-fA-F0-9]/u.test(input)) {\n        throw new Error(`Invalid hex string: ${JSON.stringify(input)}`);\n    }\n    return Uint8Array.from(input\n        .match(/.{2}/g // Split string by every two characters\n    )\n        .map((byte) => parseInt(byte, 16)));\n}\nfunction hexStringToBase64urlString(input) {\n    const buffer = hexStringToUint8Array(input);\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.stringToBase64urlString)(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUNHOztBQUU1RDtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFLGdCQUFnQixzRUFBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxzQkFBc0I7QUFDckU7QUFDQTtBQUNBLGtCQUFrQixFQUFFO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDBFQUF1QjtBQUNsQzs7QUFFcUM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3V0aWxzLm1qcz82NzE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBvaW50RGVjb2RlIH0gZnJvbSAnLi90aW5rL2VsbGlwdGljX2N1cnZlcy5tanMnO1xuaW1wb3J0IHsgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbmZ1bmN0aW9uIGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soaW5wdXQpIHtcbiAgICBjb25zdCB7IHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIGNvbXByZXNzZWRQdWJsaWNLZXlIZXggfSA9IGlucHV0O1xuICAgIGNvbnN0IGp3ayA9IHBvaW50RGVjb2RlKGhleFN0cmluZ1RvVWludDhBcnJheShjb21wcmVzc2VkUHVibGljS2V5SGV4KSk7XG4gICAgandrLmQgPSBoZXhTdHJpbmdUb0Jhc2U2NHVybFN0cmluZyh1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4KTtcbiAgICByZXR1cm4gandrO1xufVxuZnVuY3Rpb24gaGV4U3RyaW5nVG9VaW50OEFycmF5KGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICBpbnB1dC5sZW5ndGggJSAyICE9PSAwIHx8XG4gICAgICAgIC9bXmEtZkEtRjAtOV0vdS50ZXN0KGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGV4IHN0cmluZzogJHtKU09OLnN0cmluZ2lmeShpbnB1dCl9YCk7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oaW5wdXRcbiAgICAgICAgLm1hdGNoKC8uezJ9L2cgLy8gU3BsaXQgc3RyaW5nIGJ5IGV2ZXJ5IHR3byBjaGFyYWN0ZXJzXG4gICAgKVxuICAgICAgICAubWFwKChieXRlKSA9PiBwYXJzZUludChieXRlLCAxNikpKTtcbn1cbmZ1bmN0aW9uIGhleFN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKGlucHV0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gaGV4U3RyaW5nVG9VaW50OEFycmF5KGlucHV0KTtcbiAgICByZXR1cm4gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoYnVmZmVyLnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpLCBcIlwiKSk7XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDRTs7QUFFMUQ7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHFFQUF5QjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLHdFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC93ZWJjcnlwdG8ubWpzP2ZmZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9IGZyb20gJy4vdXRpbHMubWpzJztcbmltcG9ydCB7IHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBjb250ZW50LCBwdWJsaWNLZXksIHByaXZhdGVLZXkgfSA9IGlucHV0O1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IGltcG9ydFR1cm5rZXlBcGlLZXkoe1xuICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5LFxuICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4OiBwdWJsaWNLZXksXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IHNpZ25NZXNzYWdlKHsga2V5LCBjb250ZW50IH0pO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFR1cm5rZXlBcGlLZXkoaW5wdXQpIHtcbiAgICBjb25zdCB7IHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIGNvbXByZXNzZWRQdWJsaWNLZXlIZXggfSA9IGlucHV0O1xuICAgIGNvbnN0IGp3ayA9IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soe1xuICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LFxuICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4LFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcImp3a1wiLCBqd2ssIHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBuYW1lZEN1cnZlOiBcIlAtMjU2XCIsXG4gICAgfSwgZmFsc2UsIC8vIG5vdCBleHRyYWN0YWJsZVxuICAgIFtcInNpZ25cIl0gLy8gYWxsb3cgc2lnbmluZ1xuICAgICk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZShpbnB1dCkge1xuICAgIGNvbnN0IHsga2V5LCBjb250ZW50IH0gPSBpbnB1dDtcbiAgICBjb25zdCBzaWduYXR1cmVJZWVlMTM2MyA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbih7XG4gICAgICAgIG5hbWU6IFwiRUNEU0FcIixcbiAgICAgICAgaGFzaDogXCJTSEEtMjU2XCIsXG4gICAgfSwga2V5LCBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY29udGVudCkpO1xuICAgIGNvbnN0IHNpZ25hdHVyZURlciA9IGNvbnZlcnRFY2RzYUllZWUxMzYzVG9EZXIobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlSWVlZTEzNjMpKTtcbiAgICByZXR1cm4gdWludDhBcnJheVRvSGV4U3RyaW5nKHNpZ25hdHVyZURlcik7XG59XG4vKipcbiAqIGBTdWJ0bGVDcnlwdG8uc2lnbiguLi4pYCBvdXRwdXRzIHNpZ25hdHVyZSBpbiBJRUVFIFAxMzYzIGZvcm1hdDpcbiAqIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N1YnRsZUNyeXB0by9zaWduI2VjZHNhXG4gKlxuICogVHVybmtleSBleHBlY3RzIHRoZSBzaWduYXR1cmUgZW5jb2RpbmcgdG8gYmUgREVSLWVuY29kZWQgQVNOLjE6XG4gKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS90a2hxL3RrY2xpL2Jsb2IvN2YwMTU5YWY1YTczMzg3ZmYwNTA2NDcxODBkMWRiNGQzYTNhYTAzMy9zcmMvaW50ZXJuYWwvYXBpa2V5L2FwaWtleS5nbyNMMTQ5XG4gKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvdGluay9ibG9iLzZmNzRiOTlhMmJmZTY2NzdlMzY3MDc5OTExNmE1NzI2OGZkMDY3ZmEvamF2YXNjcmlwdC9zdWJ0bGUvZWxsaXB0aWNfY3VydmVzLnRzI0wxMTRcbiAqXG4gKiBUcmFuc2Zvcm0gYW4gRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgMTM2MyBlbmNvZGluZyB0byBERVIgZW5jb2RpbmcuXG4gKlxuICogQHBhcmFtIGllZWUgdGhlIEVDRFNBIHNpZ25hdHVyZSBpbiBJRUVFIGVuY29kaW5nXG4gKiBAcmV0dXJuIEVDRFNBIHNpZ25hdHVyZSBpbiBERVIgZW5jb2RpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihpZWVlKSB7XG4gICAgaWYgKGllZWUubGVuZ3RoICUgMiAhPSAwIHx8IGllZWUubGVuZ3RoID09IDAgfHwgaWVlZS5sZW5ndGggPiAxMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBJRUVFIFAxMzYzIHNpZ25hdHVyZSBlbmNvZGluZy4gTGVuZ3RoOiBcIiArIGllZWUubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgciA9IHRvVW5zaWduZWRCaWdOdW0oaWVlZS5zdWJhcnJheSgwLCBpZWVlLmxlbmd0aCAvIDIpKTtcbiAgICBjb25zdCBzID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KGllZWUubGVuZ3RoIC8gMiwgaWVlZS5sZW5ndGgpKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSAxICsgMSArIHIubGVuZ3RoICsgMSArIDEgKyBzLmxlbmd0aDtcbiAgICBsZXQgZGVyO1xuICAgIGlmIChsZW5ndGggPj0gMTI4KSB7XG4gICAgICAgIGRlciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCArIDMpO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gNDg7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSAxMjggKyAxO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMik7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IGxlbmd0aDtcbiAgICB9XG4gICAgZGVyW29mZnNldCsrXSA9IDI7XG4gICAgZGVyW29mZnNldCsrXSA9IHIubGVuZ3RoO1xuICAgIGRlci5zZXQociwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gci5sZW5ndGg7XG4gICAgZGVyW29mZnNldCsrXSA9IDI7XG4gICAgZGVyW29mZnNldCsrXSA9IHMubGVuZ3RoO1xuICAgIGRlci5zZXQocywgb2Zmc2V0KTtcbiAgICByZXR1cm4gZGVyO1xufVxuLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDMxMVxuICpcbiAqIFRyYW5zZm9ybSBhIGJpZyBpbnRlZ2VyIGluIGJpZyBlbmRpYW4gdG8gbWluaW1hbCB1bnNpZ25lZCBmb3JtIHdoaWNoIGhhc1xuICogbm8gZXh0cmEgemVybyBhdCB0aGUgYmVnaW5uaW5nIGV4Y2VwdCB3aGVuIHRoZSBoaWdoZXN0IGJpdCBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIHRvVW5zaWduZWRCaWdOdW0oYnl0ZXMpIHtcbiAgICAvLyBSZW1vdmUgemVybyBwcmVmaXhlcy5cbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIHdoaWxlIChzdGFydCA8IGJ5dGVzLmxlbmd0aCAmJiBieXRlc1tzdGFydF0gPT0gMCkge1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPT0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHN0YXJ0ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgbGV0IGV4dHJhWmVybyA9IDA7XG4gICAgLy8gSWYgdGhlIDFzdCBiaXQgaXMgbm90IHplcm8sIGFkZCAxIHplcm8gYnl0ZS5cbiAgICBpZiAoKGJ5dGVzW3N0YXJ0XSAmIDEyOCkgPT0gMTI4KSB7XG4gICAgICAgIC8vIEFkZCBleHRyYSB6ZXJvLlxuICAgICAgICBleHRyYVplcm8gPSAxO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShieXRlcy5sZW5ndGggLSBzdGFydCArIGV4dHJhWmVybyk7XG4gICAgcmVzLnNldChieXRlcy5zdWJhcnJheShzdGFydCksIGV4dHJhWmVybyk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYmNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9fc2hvcnR3X3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDcUI7QUFDUDtBQUN4RDtBQUNPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyx3REFBSSxZQUFZLGdFQUFXO0FBQzNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ087QUFDUCw2QkFBNkIscUVBQVcsR0FBRywrQkFBK0I7QUFDMUUsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL19zaG9ydHdfdXRpbHMuanM/YzdjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgd2VpZXJzdHJhc3MgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbi8vIGNvbm5lY3RzIG5vYmxlLWN1cnZlcyB0byBub2JsZS1oYXNoZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNoLFxuICAgICAgICBobWFjOiAoa2V5LCAuLi5tc2dzKSA9PiBobWFjKGhhc2gsIGtleSwgY29uY2F0Qnl0ZXMoLi4ubXNncykpLFxuICAgICAgICByYW5kb21CeXRlcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1cnZlKGN1cnZlRGVmLCBkZWZIYXNoKSB7XG4gICAgY29uc3QgY3JlYXRlID0gKGhhc2gpID0+IHdlaWVyc3RyYXNzKHsgLi4uY3VydmVEZWYsIC4uLmdldEhhc2goaGFzaCkgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyAuLi5jcmVhdGUoZGVmSGFzaCksIGNyZWF0ZSB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9zaG9ydHdfdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nfunction bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        _utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(key))\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   p256: () => (/* binding */ p256),\n/* harmony export */   secp256r1: () => (/* binding */ secp256r1)\n/* harmony export */ });\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n// prettier-ignore\nconst p256 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: CURVE_A, // Equation params: a, b\n    b: CURVE_B,\n    Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n    // Curve order, total count of valid points in the field\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    // Base (generator) point (x, y)\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n    h: BigInt(1),\n    lowS: false,\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\nconst secp256r1 = p256;\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_3__.mapToCurveSimpleSWU)(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(secp256r1.ProjectivePoint, (scalars) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=p256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9wMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ2lEO0FBQ0g7QUFDQTtBQUNrQjtBQUNMO0FBQzNEO0FBQ0E7QUFDQSxXQUFXLDJEQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNPLGFBQWEsNkRBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUUsd0RBQU07QUFDRjtBQUNQLHNDQUFzQyw2RUFBbUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1DQUFtQyx3RUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdEQUFNO0FBQ2hCLENBQUM7QUFDTTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vcDI1Ni5qcz8yNTA4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmltcG9ydCB7IGNyZWF0ZUN1cnZlIH0gZnJvbSAnLi9fc2hvcnR3X3V0aWxzLmpzJztcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMjU2JztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9hYnN0cmFjdC9tb2R1bGFyLmpzJztcbmltcG9ydCB7IG1hcFRvQ3VydmVTaW1wbGVTV1UgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUhhc2hlciB9IGZyb20gJy4vYWJzdHJhY3QvaGFzaC10by1jdXJ2ZS5qcyc7XG4vLyBOSVNUIHNlY3AyNTZyMSBha2EgcDI1NlxuLy8gaHR0cHM6Ly93d3cuc2VjZy5vcmcvc2VjMi12Mi5wZGYsIGh0dHBzOi8vbmV1cm9tYW5jZXIuc2svc3RkL25pc3QvUC0yNTZcbmNvbnN0IEZwID0gRmllbGQoQmlnSW50KCcweGZmZmZmZmZmMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKSk7XG5jb25zdCBDVVJWRV9BID0gRnAuY3JlYXRlKEJpZ0ludCgnLTMnKSk7XG5jb25zdCBDVVJWRV9CID0gQmlnSW50KCcweDVhYzYzNWQ4YWEzYTkzZTdiM2ViYmQ1NTc2OTg4NmJjNjUxZDA2YjBjYzUzYjBmNjNiY2UzYzNlMjdkMjYwNGInKTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IHAyNTYgPSBjcmVhdGVDdXJ2ZSh7XG4gICAgYTogQ1VSVkVfQSwgLy8gRXF1YXRpb24gcGFyYW1zOiBhLCBiXG4gICAgYjogQ1VSVkVfQixcbiAgICBGcCwgLy8gRmllbGQ6IDJuKioyMjRuICogKDJuKiozMm4tMW4pICsgMm4qKjE5Mm4gKyAybioqOTZuLTFuXG4gICAgLy8gQ3VydmUgb3JkZXIsIHRvdGFsIGNvdW50IG9mIHZhbGlkIHBvaW50cyBpbiB0aGUgZmllbGRcbiAgICBuOiBCaWdJbnQoJzB4ZmZmZmZmZmYwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZiY2U2ZmFhZGE3MTc5ZTg0ZjNiOWNhYzJmYzYzMjU1MScpLFxuICAgIC8vIEJhc2UgKGdlbmVyYXRvcikgcG9pbnQgKHgsIHkpXG4gICAgR3g6IEJpZ0ludCgnMHg2YjE3ZDFmMmUxMmM0MjQ3ZjhiY2U2ZTU2M2E0NDBmMjc3MDM3ZDgxMmRlYjMzYTBmNGExMzk0NWQ4OThjMjk2JyksXG4gICAgR3k6IEJpZ0ludCgnMHg0ZmUzNDJlMmZlMWE3ZjliOGVlN2ViNGE3YzBmOWUxNjJiY2UzMzU3NmIzMTVlY2VjYmI2NDA2ODM3YmY1MWY1JyksXG4gICAgaDogQmlnSW50KDEpLFxuICAgIGxvd1M6IGZhbHNlLFxufSwgc2hhMjU2KTtcbmV4cG9ydCBjb25zdCBzZWNwMjU2cjEgPSBwMjU2O1xuY29uc3QgbWFwU1dVID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwLCB7XG4gICAgQTogQ1VSVkVfQSxcbiAgICBCOiBDVVJWRV9CLFxuICAgIFo6IEZwLmNyZWF0ZShCaWdJbnQoJy0xMCcpKSxcbn0pKSgpO1xuY29uc3QgaHRmID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBjcmVhdGVIYXNoZXIoc2VjcDI1NnIxLlByb2plY3RpdmVQb2ludCwgKHNjYWxhcnMpID0+IG1hcFNXVShzY2FsYXJzWzBdKSwge1xuICAgIERTVDogJ1AyNTZfWE1EOlNIQS0yNTZfU1NXVV9ST18nLFxuICAgIGVuY29kZURTVDogJ1AyNTZfWE1EOlNIQS0yNTZfU1NXVV9OVV8nLFxuICAgIHA6IEZwLk9SREVSLFxuICAgIG06IDEsXG4gICAgazogMTI4LFxuICAgIGV4cGFuZDogJ3htZCcsXG4gICAgaGFzaDogc2hhMjU2LFxufSkpKCk7XG5leHBvcnQgY29uc3QgaGFzaFRvQ3VydmUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGh0Zi5oYXNoVG9DdXJ2ZSkoKTtcbmV4cG9ydCBjb25zdCBlbmNvZGVUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuZW5jb2RlVG9DdXJ2ZSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXAyNTYuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBLDBEQUEwRCxFQUFFO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsa0JBQWtCLFNBQVM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixJQUFJO0FBQ3JGO0FBQ0E7QUFDcUQ7QUFDckQsaUJBQWlCO0FBQ2pCLGlFQUFlLE1BQU0sRUFBQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzP2I1NzEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pIHx8IG4gPCAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBvc2l0aXZlIGludGVnZXIgZXhwZWN0ZWQsIG5vdCAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBib29sZWFuIGV4cGVjdGVkLCBub3QgJHtifWApO1xufVxuLy8gY29waWVkIGZyb20gdXRpbHNcbmV4cG9ydCBmdW5jdGlvbiBpc0J5dGVzKGEpIHtcbiAgICByZXR1cm4gKGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8XG4gICAgICAgIChhICE9IG51bGwgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnICYmIGEuY29uc3RydWN0b3IubmFtZSA9PT0gJ1VpbnQ4QXJyYXknKSk7XG59XG5mdW5jdGlvbiBieXRlcyhiLCAuLi5sZW5ndGhzKSB7XG4gICAgaWYgKCFpc0J5dGVzKGIpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgICBpZiAobGVuZ3Rocy5sZW5ndGggPiAwICYmICFsZW5ndGhzLmluY2x1ZGVzKGIubGVuZ3RoKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVaW50OEFycmF5IGV4cGVjdGVkIG9mIGxlbmd0aCAke2xlbmd0aHN9LCBub3Qgb2YgbGVuZ3RoPSR7Yi5sZW5ndGh9YCk7XG59XG5mdW5jdGlvbiBoYXNoKGgpIHtcbiAgICBpZiAodHlwZW9mIGggIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGguY3JlYXRlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggc2hvdWxkIGJlIHdyYXBwZWQgYnkgdXRpbHMud3JhcENvbnN0cnVjdG9yJyk7XG4gICAgbnVtYmVyKGgub3V0cHV0TGVuKTtcbiAgICBudW1iZXIoaC5ibG9ja0xlbik7XG59XG5mdW5jdGlvbiBleGlzdHMoaW5zdGFuY2UsIGNoZWNrRmluaXNoZWQgPSB0cnVlKSB7XG4gICAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCcpO1xuICAgIGlmIChjaGVja0ZpbmlzaGVkICYmIGluc3RhbmNlLmZpbmlzaGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQnKTtcbn1cbmZ1bmN0aW9uIG91dHB1dChvdXQsIGluc3RhbmNlKSB7XG4gICAgYnl0ZXMob3V0KTtcbiAgICBjb25zdCBtaW4gPSBpbnN0YW5jZS5vdXRwdXRMZW47XG4gICAgaWYgKG91dC5sZW5ndGggPCBtaW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaWdlc3RJbnRvKCkgZXhwZWN0cyBvdXRwdXQgYnVmZmVyIG9mIGxlbmd0aCBhdCBsZWFzdCAke21pbn1gKTtcbiAgICB9XG59XG5leHBvcnQgeyBudW1iZXIsIGJvb2wsIGJ5dGVzLCBoYXNoLCBleGlzdHMsIG91dHB1dCB9O1xuY29uc3QgYXNzZXJ0ID0geyBudW1iZXIsIGJvb2wsIGJ5dGVzLCBoYXNoLCBleGlzdHMsIG91dHB1dCB9O1xuZXhwb3J0IGRlZmF1bHQgYXNzZXJ0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Fzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fbWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEM7QUFDUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsMkNBQUk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBVTtBQUM5QjtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLGdCQUFnQix5QkFBeUI7QUFDekMsZUFBZSxrREFBTztBQUN0QjtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxxREFBVTtBQUMzQyx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLFFBQVEsa0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0MsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19tZC5qcz8yMGUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4aXN0cywgb3V0cHV0IH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIGNyZWF0ZVZpZXcsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIFBvbHlmaWxsIGZvciBTYWZhcmkgMTRcbmZ1bmN0aW9uIHNldEJpZ1VpbnQ2NCh2aWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSkge1xuICAgIGlmICh0eXBlb2Ygdmlldy5zZXRCaWdVaW50NjQgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aWV3LnNldEJpZ1VpbnQ2NChieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSk7XG4gICAgY29uc3QgXzMybiA9IEJpZ0ludCgzMik7XG4gICAgY29uc3QgX3UzMl9tYXggPSBCaWdJbnQoMHhmZmZmZmZmZik7XG4gICAgY29uc3Qgd2ggPSBOdW1iZXIoKHZhbHVlID4+IF8zMm4pICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IHdsID0gTnVtYmVyKHZhbHVlICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IGggPSBpc0xFID8gNCA6IDA7XG4gICAgY29uc3QgbCA9IGlzTEUgPyAwIDogNDtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgaCwgd2gsIGlzTEUpO1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBsLCB3bCwgaXNMRSk7XG59XG4vLyBDaG9pY2U6IGEgPyBiIDogY1xuZXhwb3J0IGNvbnN0IENoaSA9IChhLCBiLCBjKSA9PiAoYSAmIGIpIF4gKH5hICYgYyk7XG4vLyBNYWpvcml0eSBmdW5jdGlvbiwgdHJ1ZSBpZiBhbnkgdHdvIGlucHVzdCBpcyB0cnVlXG5leHBvcnQgY29uc3QgTWFqID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTtcbi8qKlxuICogTWVya2xlLURhbWdhcmQgaGFzaCBjb25zdHJ1Y3Rpb24gYmFzZSBjbGFzcy5cbiAqIENvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIE1ENSwgUklQRU1ELCBTSEExLCBTSEEyLlxuICovXG5leHBvcnQgY2xhc3MgSGFzaE1EIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIG91dHB1dExlbiwgcGFkT2Zmc2V0LCBpc0xFKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMucGFkT2Zmc2V0ID0gcGFkT2Zmc2V0O1xuICAgICAgICB0aGlzLmlzTEUgPSBpc0xFO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgdGhpcy52aWV3ID0gY3JlYXRlVmlldyh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIC8vIFBhZGRpbmdcbiAgICAgICAgLy8gV2UgY2FuIGF2b2lkIGFsbG9jYXRpb24gb2YgYnVmZmVyIGZvciBwYWRkaW5nIGNvbXBsZXRlbHkgaWYgaXRcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbm90IGFsbG9jYXRlZCBoZXJlLiBCdXQgaXQgd29uJ3QgY2hhbmdlIHBlcmZvcm1hbmNlLlxuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgdmlldywgYmxvY2tMZW4sIGlzTEUgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7IHBvcyB9ID0gdGhpcztcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXG4gICAgICAgIGJ1ZmZlcltwb3MrK10gPSAwYjEwMDAwMDAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zdWJhcnJheShwb3MpLmZpbGwoMCk7XG4gICAgICAgIC8vIHdlIGhhdmUgbGVzcyB0aGFuIHBhZE9mZnNldCBsZWZ0IGluIGJ1ZmZlciwgc28gd2UgY2Fubm90IHB1dCBsZW5ndGggaW5cbiAgICAgICAgLy8gY3VycmVudCBibG9jaywgbmVlZCBwcm9jZXNzIGl0IGFuZCBwYWQgYWdhaW5cbiAgICAgICAgaWYgKHRoaXMucGFkT2Zmc2V0ID4gYmxvY2tMZW4gLSBwb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFkIHVudGlsIGZ1bGwgYmxvY2sgYnl0ZSB3aXRoIHplcm9zXG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBibG9ja0xlbjsgaSsrKVxuICAgICAgICAgICAgYnVmZmVyW2ldID0gMDtcbiAgICAgICAgLy8gTm90ZTogc2hhNTEyIHJlcXVpcmVzIGxlbmd0aCB0byBiZSAxMjhiaXQgaW50ZWdlciwgYnV0IGxlbmd0aCBpbiBKUyB3aWxsIG92ZXJmbG93IGJlZm9yZSB0aGF0XG4gICAgICAgIC8vIFlvdSBuZWVkIHRvIHdyaXRlIGFyb3VuZCAyIGV4YWJ5dGVzICh1NjRfbWF4IC8gOCAvICgxMDI0Kio2KSkgZm9yIHRoaXMgdG8gaGFwcGVuLlxuICAgICAgICAvLyBTbyB3ZSBqdXN0IHdyaXRlIGxvd2VzdCA2NCBiaXRzIG9mIHRoYXQgdmFsdWUuXG4gICAgICAgIHNldEJpZ1VpbnQ2NCh2aWV3LCBibG9ja0xlbiAtIDgsIEJpZ0ludCh0aGlzLmxlbmd0aCAqIDgpLCBpc0xFKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICBjb25zdCBvdmlldyA9IGNyZWF0ZVZpZXcob3V0KTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5vdXRwdXRMZW47XG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXG4gICAgICAgIGlmIChsZW4gJSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIHNob3VsZCBiZSBhbGlnbmVkIHRvIDMyYml0Jyk7XG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgaWYgKG91dExlbiA+IHN0YXRlLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgICAgICAgICAgb3ZpZXcuc2V0VWludDMyKDQgKiBpLCBzdGF0ZVtpXSwgaXNMRSk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcbiAgICAgICAgdG8uc2V0KC4uLnRoaXMuZ2V0KCkpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBidWZmZXIsIGxlbmd0aCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgcG9zIH0gPSB0aGlzO1xuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRvLnBvcyA9IHBvcztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICBpZiAobGVuZ3RoICUgYmxvY2tMZW4pXG4gICAgICAgICAgICB0by5idWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fbWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQzNCLGVBQWUsMk1BQUUsV0FBVywyTUFBRSxpQkFBaUIsME5BQWlCLEdBQUcsa0RBQVk7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcz9lOTFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIHVzZSBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gYnJvd3NlcnMgYW5kIG5vZGUuanMgMTYrLlxuLy8gU2VlIHV0aWxzLnRzIGZvciBkZXRhaWxzLlxuLy8gVGhlIGZpbGUgd2lsbCB0aHJvdyBvbiBub2RlLmpzIDE0IGFuZCBlYXJsaWVyLlxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgbmMgZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IGNvbnN0IGNyeXB0byA9IG5jICYmIHR5cGVvZiBuYyA9PT0gJ29iamVjdCcgJiYgJ3dlYmNyeXB0bycgaW4gbmMgPyBuYy53ZWJjcnlwdG8gOiB1bmRlZmluZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9Ob2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9obWFjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0c7QUFDckQ7QUFDM0M7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdEQUFVO0FBQ2xCLG9CQUFvQixrREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQixRQUFRLGlEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLGdCQUFnQix5REFBeUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanM/NTBkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXNoIGFzIGFzc2VydEhhc2gsIGJ5dGVzIGFzIGFzc2VydEJ5dGVzLCBleGlzdHMgYXMgYXNzZXJ0RXhpc3RzIH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIEhNQUMgKFJGQyAyMTA0KVxuZXhwb3J0IGNsYXNzIEhNQUMgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoLCBfa2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgYXNzZXJ0SGFzaChoYXNoKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdG9CeXRlcyhfa2V5KTtcbiAgICAgICAgdGhpcy5pSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pSGFzaC51cGRhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGluc3RhbmNlIG9mIGNsYXNzIHdoaWNoIGV4dGVuZHMgdXRpbHMuSGFzaCcpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gdGhpcy5pSGFzaC5ibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSB0aGlzLmlIYXNoLm91dHB1dExlbjtcbiAgICAgICAgY29uc3QgYmxvY2tMZW4gPSB0aGlzLmJsb2NrTGVuO1xuICAgICAgICBjb25zdCBwYWQgPSBuZXcgVWludDhBcnJheShibG9ja0xlbik7XG4gICAgICAgIC8vIGJsb2NrTGVuIGNhbiBiZSBiaWdnZXIgdGhhbiBvdXRwdXRMZW5cbiAgICAgICAgcGFkLnNldChrZXkubGVuZ3RoID4gYmxvY2tMZW4gPyBoYXNoLmNyZWF0ZSgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpIDoga2V5KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNjtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgLy8gQnkgZG9pbmcgdXBkYXRlIChwcm9jZXNzaW5nIG9mIGZpcnN0IGJsb2NrKSBvZiBvdXRlciBoYXNoIGhlcmUgd2UgY2FuIHJlLXVzZSBpdCBiZXR3ZWVuIG11bHRpcGxlIGNhbGxzIHZpYSBjbG9uZVxuICAgICAgICB0aGlzLm9IYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgLy8gVW5kbyBpbnRlcm5hbCBYT1IgJiYgYXBwbHkgb3V0ZXIgWE9SXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzYgXiAweDVjO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICBwYWQuZmlsbCgwKTtcbiAgICB9XG4gICAgdXBkYXRlKGJ1Zikge1xuICAgICAgICBhc3NlcnRFeGlzdHModGhpcyk7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKGJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBhc3NlcnRFeGlzdHModGhpcyk7XG4gICAgICAgIGFzc2VydEJ5dGVzKG91dCwgdGhpcy5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLm9IYXNoLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGlnZXN0SW50byhvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2Ugd2l0aG91dCBjYWxsaW5nIGNvbnN0cnVjdG9yIHNpbmNlIGtleSBhbHJlYWR5IGluIHN0YXRlIGFuZCB3ZSBkb24ndCBrbm93IGl0LlxuICAgICAgICB0byB8fCAodG8gPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwge30pKTtcbiAgICAgICAgY29uc3QgeyBvSGFzaCwgaUhhc2gsIGZpbmlzaGVkLCBkZXN0cm95ZWQsIGJsb2NrTGVuLCBvdXRwdXRMZW4gfSA9IHRoaXM7XG4gICAgICAgIHRvID0gdG87XG4gICAgICAgIHRvLmZpbmlzaGVkID0gZmluaXNoZWQ7XG4gICAgICAgIHRvLmRlc3Ryb3llZCA9IGRlc3Ryb3llZDtcbiAgICAgICAgdG8uYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdG8ub3V0cHV0TGVuID0gb3V0cHV0TGVuO1xuICAgICAgICB0by5vSGFzaCA9IG9IYXNoLl9jbG9uZUludG8odG8ub0hhc2gpO1xuICAgICAgICB0by5pSGFzaCA9IGlIYXNoLl9jbG9uZUludG8odG8uaUhhc2gpO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vSGFzaC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaUhhc2guZGVzdHJveSgpO1xuICAgIH1cbn1cbi8qKlxuICogSE1BQzogUkZDMjEwNCBtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIGNvZGUuXG4gKiBAcGFyYW0gaGFzaCAtIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCBlLmcuIHNoYTI1NlxuICogQHBhcmFtIGtleSAtIG1lc3NhZ2Uga2V5XG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1lc3NhZ2UgZGF0YVxuICovXG5leHBvcnQgY29uc3QgaG1hYyA9IChoYXNoLCBrZXksIG1lc3NhZ2UpID0+IG5ldyBITUFDKGhhc2gsIGtleSkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdCgpO1xuaG1hYy5jcmVhdGUgPSAoaGFzaCwga2V5KSA9PiBuZXcgSE1BQyhoYXNoLCBrZXkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1hYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEyNTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwwQ0FBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlCQUF5QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQSx1QkFBdUIsK0NBQUksV0FBVywrQ0FBSTtBQUMxQyx1QkFBdUIsK0NBQUksV0FBVywrQ0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxjQUFjLHlCQUF5QjtBQUN2Qyx3QkFBd0IsUUFBUTtBQUNoQywyQkFBMkIsK0NBQUksU0FBUywrQ0FBSSxVQUFVLCtDQUFJO0FBQzFELHFDQUFxQywyQ0FBRztBQUN4QywyQkFBMkIsK0NBQUksU0FBUywrQ0FBSSxVQUFVLCtDQUFJO0FBQzFELGlDQUFpQywyQ0FBRztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLDBEQUFlO0FBQzlDLCtCQUErQiwwREFBZTtBQUNyRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEyNTYuanM/MzY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNoTUQsIENoaSwgTWFqIH0gZnJvbSAnLi9fbWQuanMnO1xuaW1wb3J0IHsgcm90ciwgd3JhcENvbnN0cnVjdG9yIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBTSEEyLTI1NiBuZWVkIHRvIHRyeSAyXjEyOCBoYXNoZXMgdG8gZXhlY3V0ZSBiaXJ0aGRheSBhdHRhY2suXG4vLyBCVEMgbmV0d29yayBpcyBkb2luZyAyXjY3IGhhc2hlcy9zZWMgYXMgcGVyIGVhcmx5IDIwMjMuXG4vLyBSb3VuZCBjb25zdGFudHM6XG4vLyBmaXJzdCAzMiBiaXRzIG9mIHRoZSBmcmFjdGlvbmFsIHBhcnRzIG9mIHRoZSBjdWJlIHJvb3RzIG9mIHRoZSBmaXJzdCA2NCBwcmltZXMgMi4uMzExKVxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBTSEEyNTZfSyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gICAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMywgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLCAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAgIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gICAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMywgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLCAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAgIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gICAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCwgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXSk7XG4vLyBJbml0aWFsIHN0YXRlOlxuLy8gZmlyc3QgMzIgYml0cyBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0cyBvZiB0aGUgc3F1YXJlIHJvb3RzIG9mIHRoZSBmaXJzdCA4IHByaW1lcyAyLi4xOVxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBTSEEyNTZfSVYgPSAvKiBAX19QVVJFX18gKi8gbmV3IFVpbnQzMkFycmF5KFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLCAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5XG5dKTtcbi8vIFRlbXBvcmFyeSBidWZmZXIsIG5vdCB1c2VkIHRvIHN0b3JlIGFueXRoaW5nIGJldHdlZW4gcnVuc1xuLy8gTmFtZWQgdGhpcyB3YXkgYmVjYXVzZSBpdCBtYXRjaGVzIHNwZWNpZmljYXRpb24uXG5jb25zdCBTSEEyNTZfVyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoNjQpO1xuY2xhc3MgU0hBMjU2IGV4dGVuZHMgSGFzaE1EIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoNjQsIDMyLCA4LCBmYWxzZSk7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB1c2UgYXJyYXkgaGVyZSBzaW5jZSBhcnJheSBhbGxvd3MgaW5kZXhpbmcgYnkgdmFyaWFibGVcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgb3B0aW1pemVyL2NvbXBpbGVyIGNhbm5vdCB1c2UgcmVnaXN0ZXJzLlxuICAgICAgICB0aGlzLkEgPSBTSEEyNTZfSVZbMF0gfCAwO1xuICAgICAgICB0aGlzLkIgPSBTSEEyNTZfSVZbMV0gfCAwO1xuICAgICAgICB0aGlzLkMgPSBTSEEyNTZfSVZbMl0gfCAwO1xuICAgICAgICB0aGlzLkQgPSBTSEEyNTZfSVZbM10gfCAwO1xuICAgICAgICB0aGlzLkUgPSBTSEEyNTZfSVZbNF0gfCAwO1xuICAgICAgICB0aGlzLkYgPSBTSEEyNTZfSVZbNV0gfCAwO1xuICAgICAgICB0aGlzLkcgPSBTSEEyNTZfSVZbNl0gfCAwO1xuICAgICAgICB0aGlzLkggPSBTSEEyNTZfSVZbN10gfCAwO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtBLCBCLCBDLCBELCBFLCBGLCBHLCBIXTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgc2V0KEEsIEIsIEMsIEQsIEUsIEYsIEcsIEgpIHtcbiAgICAgICAgdGhpcy5BID0gQSB8IDA7XG4gICAgICAgIHRoaXMuQiA9IEIgfCAwO1xuICAgICAgICB0aGlzLkMgPSBDIHwgMDtcbiAgICAgICAgdGhpcy5EID0gRCB8IDA7XG4gICAgICAgIHRoaXMuRSA9IEUgfCAwO1xuICAgICAgICB0aGlzLkYgPSBGIHwgMDtcbiAgICAgICAgdGhpcy5HID0gRyB8IDA7XG4gICAgICAgIHRoaXMuSCA9IEggfCAwO1xuICAgIH1cbiAgICBwcm9jZXNzKHZpZXcsIG9mZnNldCkge1xuICAgICAgICAvLyBFeHRlbmQgdGhlIGZpcnN0IDE2IHdvcmRzIGludG8gdGhlIHJlbWFpbmluZyA0OCB3b3JkcyB3WzE2Li42M10gb2YgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgYXJyYXlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrLCBvZmZzZXQgKz0gNClcbiAgICAgICAgICAgIFNIQTI1Nl9XW2ldID0gdmlldy5nZXRVaW50MzIob2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxNjsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IFcxNSA9IFNIQTI1Nl9XW2kgLSAxNV07XG4gICAgICAgICAgICBjb25zdCBXMiA9IFNIQTI1Nl9XW2kgLSAyXTtcbiAgICAgICAgICAgIGNvbnN0IHMwID0gcm90cihXMTUsIDcpIF4gcm90cihXMTUsIDE4KSBeIChXMTUgPj4+IDMpO1xuICAgICAgICAgICAgY29uc3QgczEgPSByb3RyKFcyLCAxNykgXiByb3RyKFcyLCAxOSkgXiAoVzIgPj4+IDEwKTtcbiAgICAgICAgICAgIFNIQTI1Nl9XW2ldID0gKHMxICsgU0hBMjU2X1dbaSAtIDddICsgczAgKyBTSEEyNTZfV1tpIC0gMTZdKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcHJlc3Npb24gZnVuY3Rpb24gbWFpbiBsb29wLCA2NCByb3VuZHNcbiAgICAgICAgbGV0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTEgPSByb3RyKEUsIDYpIF4gcm90cihFLCAxMSkgXiByb3RyKEUsIDI1KTtcbiAgICAgICAgICAgIGNvbnN0IFQxID0gKEggKyBzaWdtYTEgKyBDaGkoRSwgRiwgRykgKyBTSEEyNTZfS1tpXSArIFNIQTI1Nl9XW2ldKSB8IDA7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTAgPSByb3RyKEEsIDIpIF4gcm90cihBLCAxMykgXiByb3RyKEEsIDIyKTtcbiAgICAgICAgICAgIGNvbnN0IFQyID0gKHNpZ21hMCArIE1haihBLCBCLCBDKSkgfCAwO1xuICAgICAgICAgICAgSCA9IEc7XG4gICAgICAgICAgICBHID0gRjtcbiAgICAgICAgICAgIEYgPSBFO1xuICAgICAgICAgICAgRSA9IChEICsgVDEpIHwgMDtcbiAgICAgICAgICAgIEQgPSBDO1xuICAgICAgICAgICAgQyA9IEI7XG4gICAgICAgICAgICBCID0gQTtcbiAgICAgICAgICAgIEEgPSAoVDEgKyBUMikgfCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCB0aGUgY29tcHJlc3NlZCBjaHVuayB0byB0aGUgY3VycmVudCBoYXNoIHZhbHVlXG4gICAgICAgIEEgPSAoQSArIHRoaXMuQSkgfCAwO1xuICAgICAgICBCID0gKEIgKyB0aGlzLkIpIHwgMDtcbiAgICAgICAgQyA9IChDICsgdGhpcy5DKSB8IDA7XG4gICAgICAgIEQgPSAoRCArIHRoaXMuRCkgfCAwO1xuICAgICAgICBFID0gKEUgKyB0aGlzLkUpIHwgMDtcbiAgICAgICAgRiA9IChGICsgdGhpcy5GKSB8IDA7XG4gICAgICAgIEcgPSAoRyArIHRoaXMuRykgfCAwO1xuICAgICAgICBIID0gKEggKyB0aGlzLkgpIHwgMDtcbiAgICAgICAgdGhpcy5zZXQoQSwgQiwgQywgRCwgRSwgRiwgRywgSCk7XG4gICAgfVxuICAgIHJvdW5kQ2xlYW4oKSB7XG4gICAgICAgIFNIQTI1Nl9XLmZpbGwoMCk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2V0KDAsIDAsIDAsIDAsIDAsIDAsIDAsIDApO1xuICAgICAgICB0aGlzLmJ1ZmZlci5maWxsKDApO1xuICAgIH1cbn1cbi8vIENvbnN0YW50cyBmcm9tIGh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9GSVBTL05JU1QuRklQUy4xODAtNC5wZGZcbmNsYXNzIFNIQTIyNCBleHRlbmRzIFNIQTI1NiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuQSA9IDB4YzEwNTllZDggfCAwO1xuICAgICAgICB0aGlzLkIgPSAweDM2N2NkNTA3IHwgMDtcbiAgICAgICAgdGhpcy5DID0gMHgzMDcwZGQxNyB8IDA7XG4gICAgICAgIHRoaXMuRCA9IDB4ZjcwZTU5MzkgfCAwO1xuICAgICAgICB0aGlzLkUgPSAweGZmYzAwYjMxIHwgMDtcbiAgICAgICAgdGhpcy5GID0gMHg2ODU4MTUxMSB8IDA7XG4gICAgICAgIHRoaXMuRyA9IDB4NjRmOThmYTcgfCAwO1xuICAgICAgICB0aGlzLkggPSAweGJlZmE0ZmE0IHwgMDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSAyODtcbiAgICB9XG59XG4vKipcbiAqIFNIQTItMjU2IGhhc2ggZnVuY3Rpb25cbiAqIEBwYXJhbSBtZXNzYWdlIC0gZGF0YSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5leHBvcnQgY29uc3Qgc2hhMjU2ID0gLyogQF9fUFVSRV9fICovIHdyYXBDb25zdHJ1Y3RvcigoKSA9PiBuZXcgU0hBMjU2KCkpO1xuZXhwb3J0IGNvbnN0IHNoYTIyNCA9IC8qIEBfX1BVUkVfXyAqLyB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IFNIQTIyNCgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTI1Ni5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/encoding/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\n// Polyfill btoa with a pure JS implementation. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQSx3RkFBd0YsaUJBQWlCLGNBQWMsRUFBRTtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdHO0FBQ2hHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9lbmNvZGluZy9kaXN0L2luZGV4Lm1qcz80ZTRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvd2ViYXV0aG4tanNvbi9ibG9iL2U5MzJiMzU4NWZhNzBiMGJkNWI1YTQwMTJiYTdkYmFkN2IwYTBkMGYvc3JjL3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLnRzI0wyM1xuICovXG5mdW5jdGlvbiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhpbnB1dCkge1xuICAgIC8vIHN0cmluZyB0byBiYXNlNjQgLS0gd2UgZG8gbm90IHJlbHkgb24gdGhlIGJyb3dzZXIncyBidG9hIHNpbmNlIGl0J3Mgbm90IHByZXNlbnQgaW4gUmVhY3QgTmF0aXZlIGVudmlyb25tZW50c1xuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2EoaW5wdXQpO1xuICAgIHJldHVybiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoYmFzZTY0U3RyaW5nKTtcbn1cbmZ1bmN0aW9uIGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPS9nLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHVpbnQ4QXJyYXlUb0hleFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZWR1Y2UoKHJlc3VsdCwgeCkgPT4gcmVzdWx0ICsgeC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpLCBcIlwiKTtcbn1cbi8vIFBvbHlmaWxsIGJ0b2Egd2l0aCBhIHB1cmUgSlMgaW1wbGVtZW50YXRpb24uIFRoaXMgaXMgYWRhcHRlZCBmcm9tIHRoZSBmb2xsb3dpbmc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vYWJhYi9ibG9iLzgwODc0YWUxZmUxY2RlMmU1ODdiYjZlNTFiNmQ3YzliNDJjYTFkMzQvbGliL2J0b2EuanNcbmZ1bmN0aW9uIGJ0b2Eocykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgIH1cbiAgICBsZXQgaTtcbiAgICAvLyBTdHJpbmcgY29udmVyc2lvbiBhcyByZXF1aXJlZCBieSBXZWIgSURMLlxuICAgIHMgPSBgJHtzfWA7XG4gICAgLy8gXCJUaGUgYnRvYSgpIG1ldGhvZCBtdXN0IHRocm93IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yXCIgRE9NRXhjZXB0aW9uIGlmXG4gICAgLy8gZGF0YSBjb250YWlucyBhbnkgY2hhcmFjdGVyIHdob3NlIGNvZGUgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIFUrMDBGRi5cIlxuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZENoYXJhY3RlckVycm9yOiBmb3VuZCBjb2RlIHBvaW50IGdyZWF0ZXIgdGhhbiAyNTU6JHtzLmNoYXJDb2RlQXQoaSl9IGF0IHBvc2l0aW9uICR7aX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBncm91cHNPZlNpeCA9IFtcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgXTtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMF0gPSBzLmNoYXJDb2RlQXQoaSkgPj4gMjtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gPSAocy5jaGFyQ29kZUF0KGkpICYgMHgwMykgPDwgNDtcbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzFdIHw9IHMuY2hhckNvZGVBdChpICsgMSkgPj4gNDtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdID0gKHMuY2hhckNvZGVBdChpICsgMSkgJiAweDBmKSA8PCAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmxlbmd0aCA+IGkgKyAyKSB7XG4gICAgICAgICAgICBncm91cHNPZlNpeFsyXSB8PSBzLmNoYXJDb2RlQXQoaSArIDIpID4+IDY7XG4gICAgICAgICAgICBncm91cHNPZlNpeFszXSA9IHMuY2hhckNvZGVBdChpICsgMikgJiAweDNmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBzT2ZTaXgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzT2ZTaXhbal0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gYnRvYUxvb2t1cChncm91cHNPZlNpeFtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGJ0b2FMb29rdXAoaW5kZXgpIHtcbiAgICAvKipcbiAgICAgKiBMb29rdXAgdGFibGUgZm9yIGJ0b2EoKSwgd2hpY2ggY29udmVydHMgYSBzaXgtYml0IG51bWJlciBpbnRvIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgQVNDSUkgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGtleXN0ciA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgNjQpIHtcbiAgICAgICAgcmV0dXJuIGtleXN0cltpbmRleF07XG4gICAgfVxuICAgIC8vIFRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUiBleGNlcHRpb24gaGVyZSAtLSB3b24ndCBiZSBoaXQgaW4gdGhlIHRlc3RzLlxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZywgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcsIHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get all suborg IDs associated given a parent org ID and an optional filter.\n         *\n         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).\n         *\n         * See also {@link stampGetSubOrgIds}.\n         */\n        this.getSubOrgIds = async (input) => {\n            return this.request(\"/public/v1/query/list_suborgs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetSubOrgIds}.\n         */\n        this.stampGetSubOrgIds = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_suborgs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Policies\n         *\n         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).\n         *\n         * See also {@link stampCreatePolicies}.\n         */\n        this.createPolicies = async (input) => {\n            return this.request(\"/public/v1/submit/create_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicies}.\n         */\n        this.stampCreatePolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Private Key Tags within an Organization\n         *\n         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).\n         *\n         * See also {@link stampDeletePrivateKeyTags}.\n         */\n        this.deletePrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePrivateKeyTags}.\n         */\n        this.stampDeletePrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete User Tags within an Organization\n         *\n         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).\n         *\n         * See also {@link stampDeleteUserTags}.\n         */\n        this.deleteUserTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUserTags}.\n         */\n        this.stampDeleteUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Users within an Organization\n         *\n         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).\n         *\n         * See also {@link stampDeleteUsers}.\n         */\n        this.deleteUsers = async (input) => {\n            return this.request(\"/public/v1/submit/delete_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUsers}.\n         */\n        this.stampDeleteUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a private key\n         *\n         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).\n         *\n         * See also {@link stampImportPrivateKey}.\n         */\n        this.importPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportPrivateKey}.\n         */\n        this.stampImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a wallet\n         *\n         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).\n         *\n         * See also {@link stampImportWallet}.\n         */\n        this.importWallet = async (input) => {\n            return this.request(\"/public/v1/submit/import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportWallet}.\n         */\n        this.stampImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new private key import\n         *\n         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).\n         *\n         * See also {@link stampInitImportPrivateKey}.\n         */\n        this.initImportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportPrivateKey}.\n         */\n        this.stampInitImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new wallet import\n         *\n         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).\n         *\n         * See also {@link stampInitImportWallet}.\n         */\n        this.initImportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportWallet}.\n         */\n        this.stampInitImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign multiple raw payloads with the same signing parameters\n         *\n         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).\n         *\n         * See also {@link stampSignRawPayloads}.\n         */\n        this.signRawPayloads = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payloads\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayloads}.\n         */\n        this.stampSignRawPayloads = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payloads\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createPolicies: () => (/* binding */ createPolicies),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   deletePrivateKeyTags: () => (/* binding */ deletePrivateKeyTags),\n/* harmony export */   deleteUserTags: () => (/* binding */ deleteUserTags),\n/* harmony export */   deleteUsers: () => (/* binding */ deleteUsers),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getSubOrgIds: () => (/* binding */ getSubOrgIds),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   importPrivateKey: () => (/* binding */ importPrivateKey),\n/* harmony export */   importWallet: () => (/* binding */ importWallet),\n/* harmony export */   initImportPrivateKey: () => (/* binding */ initImportPrivateKey),\n/* harmony export */   initImportWallet: () => (/* binding */ initImportWallet),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreatePolicies: () => (/* binding */ signCreatePolicies),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signDeletePrivateKeyTags: () => (/* binding */ signDeletePrivateKeyTags),\n/* harmony export */   signDeleteUserTags: () => (/* binding */ signDeleteUserTags),\n/* harmony export */   signDeleteUsers: () => (/* binding */ signDeleteUsers),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetSubOrgIds: () => (/* binding */ signGetSubOrgIds),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signImportPrivateKey: () => (/* binding */ signImportPrivateKey),\n/* harmony export */   signImportWallet: () => (/* binding */ signImportWallet),\n/* harmony export */   signInitImportPrivateKey: () => (/* binding */ signInitImportPrivateKey),\n/* harmony export */   signInitImportWallet: () => (/* binding */ signInitImportWallet),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRawPayloads: () => (/* binding */ signRawPayloads),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignRawPayloads: () => (/* binding */ signSignRawPayloads),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Suborgs\n *\n * Get all suborg IDs associated given a parent org ID and an optional filter.\n *\n * `POST /public/v1/query/list_suborgs`\n */\nconst getSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_suborgs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetSubOrgIds}\n */\nconst signGetSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_suborgs\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policies\n *\n * Create new Policies\n *\n * `POST /public/v1/submit/create_policies`\n */\nconst createPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicies}\n */\nconst signCreatePolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policies\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Private Key Tags\n *\n * Delete Private Key Tags within an Organization\n *\n * `POST /public/v1/submit/delete_private_key_tags`\n */\nconst deletePrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePrivateKeyTags}\n */\nconst signDeletePrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete User Tags\n *\n * Delete User Tags within an Organization\n *\n * `POST /public/v1/submit/delete_user_tags`\n */\nconst deleteUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUserTags}\n */\nconst signDeleteUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Users\n *\n * Delete Users within an Organization\n *\n * `POST /public/v1/submit/delete_users`\n */\nconst deleteUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUsers}\n */\nconst signDeleteUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_users\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Import Private Key\n *\n * Imports a private key\n *\n * `POST /public/v1/submit/import_private_key`\n */\nconst importPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportPrivateKey}\n */\nconst signImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Import Wallet\n *\n * Imports a wallet\n *\n * `POST /public/v1/submit/import_wallet`\n */\nconst importWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportWallet}\n */\nconst signImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Private Key\n *\n * Initializes a new private key import\n *\n * `POST /public/v1/submit/init_import_private_key`\n */\nconst initImportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportPrivateKey}\n */\nconst signInitImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Wallet\n *\n * Initializes a new wallet import\n *\n * `POST /public/v1/submit/init_import_wallet`\n */\nconst initImportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportWallet}\n */\nconst signInitImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payloads\n *\n * Sign multiple raw payloads with the same signing parameters\n *\n * `POST /public/v1/submit/sign_raw_payloads`\n */\nconst signRawPayloads = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayloads}\n */\nconst signSignRawPayloads = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/async.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/async.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/base.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/base.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(rsc)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(rsc)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/config.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/config.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2NvbmZpZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixLQUFLO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFMEQ7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9jb25maWcubWpzP2NmODgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29uZmlnID0ge1xuICAgIGFwaVB1YmxpY0tleTogbnVsbCxcbiAgICBhcGlQcml2YXRlS2V5OiBudWxsLFxuICAgIGJhc2VVcmw6IG51bGwsXG59O1xuY29uc3QgYnJvd3NlckNvbmZpZyA9IHtcbiAgICBiYXNlVXJsOiBudWxsLFxufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBpbnN0ZWFkLCB3aGljaCBkb2Vzbid0IHJlbHkgb24gZ2xvYmFsIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICovXG5mdW5jdGlvbiBicm93c2VySW5pdCh2YWx1ZSkge1xuICAgIGJyb3dzZXJDb25maWcuYmFzZVVybCA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmJhc2VVcmwsIFwiYmFzZVVybFwiKTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBpbnN0ZWFkLCB3aGljaCBkb2Vzbid0IHJlbHkgb24gZ2xvYmFsIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICovXG5mdW5jdGlvbiBpbml0KHZhbHVlKSB7XG4gICAgY29uZmlnLmFwaVB1YmxpY0tleSA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmFwaVB1YmxpY0tleSwgXCJhcGlQdWJsaWNLZXlcIik7XG4gICAgY29uZmlnLmFwaVByaXZhdGVLZXkgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5hcGlQcml2YXRlS2V5LCBcImFwaVByaXZhdGVLZXlcIik7XG4gICAgY29uZmlnLmJhc2VVcmwgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5iYXNlVXJsLCBcImJhc2VVcmxcIik7XG59XG5mdW5jdGlvbiBnZXRDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBpUHVibGljS2V5OiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYXBpUHVibGljS2V5LCBcImFwaVB1YmxpY0tleVwiKSxcbiAgICAgICAgYXBpUHJpdmF0ZUtleTogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmFwaVByaXZhdGVLZXksIFwiYXBpUHJpdmF0ZUtleVwiKSxcbiAgICAgICAgYmFzZVVybDogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmJhc2VVcmwsIFwiYmFzZVVybFwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlckNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlVXJsOiBhc3NlcnROb25FbXB0eVN0cmluZyhicm93c2VyQ29uZmlnLmJhc2VVcmwsIFwiYmFzZVVybFwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoaW5wdXQsIG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiIHx8ICFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtuYW1lfVwiIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nYCk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbn1cblxuZXhwb3J0IHsgYnJvd3NlckluaXQsIGdldEJyb3dzZXJDb25maWcsIGdldENvbmZpZywgaW5pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE0RztBQUNQO0FBQ3BEO0FBQ3lCO0FBQ3RCO0FBQ0k7QUFDYTtBQUM3Qjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZGQUFrQjs7QUFFbUI7QUFDOUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9pbmRleC5tanM/ODMxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwdWJsaWNfYXBpX2ZldGNoZXIgZnJvbSAnLi9fX2dlbmVyYXRlZF9fL3NlcnZpY2VzL2Nvb3JkaW5hdG9yL3B1YmxpYy92MS9wdWJsaWNfYXBpLmZldGNoZXIubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlDbGllbnQgfSBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuY2xpZW50Lm1qcyc7XG5leHBvcnQgeyBicm93c2VySW5pdCwgaW5pdCB9IGZyb20gJy4vY29uZmlnLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5UmVxdWVzdEVycm9yLCBzZWFsQW5kU3RhbXBSZXF1ZXN0Qm9keSB9IGZyb20gJy4vYmFzZS5tanMnO1xuZXhwb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuZXhwb3J0IHsgZ2V0V2ViQXV0aG5BdHRlc3RhdGlvbiB9IGZyb20gJy4vd2ViYXV0aG4ubWpzJztcbmV4cG9ydCB7IGNyZWF0ZUFjdGl2aXR5UG9sbGVyLCB3aXRoQXN5bmNQb2xsaW5nIH0gZnJvbSAnLi9hc3luYy5tanMnO1xuZXhwb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbi5tanMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBgVHVybmtleUFwaWAgaW5zdGVhZFxuICovXG5jb25zdCBQdWJsaWNBcGlTZXJ2aWNlID0gcHVibGljX2FwaV9mZXRjaGVyO1xuXG5leHBvcnQgeyBQdWJsaWNBcGlTZXJ2aWNlLCBwdWJsaWNfYXBpX2ZldGNoZXIgYXMgVHVybmtleUFwaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/shared.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/shared.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3NoYXJlZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxnQkFBZ0IsMkRBQTJEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvc2hhcmVkLm1qcz83YjJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFR1cm5rZXlBY3Rpdml0eUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgY2F1c2UsIGFjdGl2aXR5SWQsIGFjdGl2aXR5U3RhdHVzLCBhY3Rpdml0eVR5cGUgfSA9IGlucHV0O1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUdXJua2V5QWN0aXZpdHlFcnJvclwiO1xuICAgICAgICB0aGlzLmFjdGl2aXR5SWQgPSBhY3Rpdml0eUlkID8/IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlTdGF0dXMgPSBhY3Rpdml0eVN0YXR1cyA/PyBudWxsO1xuICAgICAgICB0aGlzLmFjdGl2aXR5VHlwZSA9IGFjdGl2aXR5VHlwZSA/PyBudWxsO1xuICAgICAgICB0aGlzLmNhdXNlID0gY2F1c2UgPz8gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFR1cm5rZXlBY3Rpdml0eUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/universal.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/universal.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0E7QUFDQSxjQUFjLDhDQUFPOztBQUVKO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdW5pdmVyc2FsLm1qcz80ZDQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZldGNoIGFzIGZldGNoJDEgfSBmcm9tICdjcm9zcy1mZXRjaCc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBUaGlzIGlzIHVzZWZ1bCBmb3IgbW9ja2luZyBmZXRjaCBpbiB0ZXN0cy5cbmNvbnN0IGZldGNoID0gZmV0Y2gkMTtcblxuZXhwb3J0IHsgZmV0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXZlcnNhbC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/version.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/version.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.10.0\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC92ZXJzaW9uLm1qcz85NmEwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFZFUlNJT04gPSBcIkB0dXJua2V5L2h0dHBAMi4xMC4wXCI7XG5cbmV4cG9ydCB7IFZFUlNJT04gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNaO0FBQzREOztBQUVwRztBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSwyRUFBa0M7QUFDeEU7QUFDQTtBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSx5RUFBZ0M7QUFDdEU7O0FBRW1EO0FBQ25EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9hcGkubWpzPzU3MmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVmZmVyVG9CYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5tanMnO1xuaW1wb3J0IHsgY29udmVydCB9IGZyb20gJy4vY29udmVydC5tanMnO1xuaW1wb3J0IHsgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24gfSBmcm9tICcuL3NjaGVtYS5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXR0ZXN0YXRpb24sIGNyZWRlbnRpYWwpO1xufVxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VUb0pTT04oY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBjb252ZXJ0KGJ1ZmZlclRvQmFzZTY0dXJsLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgY3JlZGVudGlhbCk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanM/YWJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBidWZmZXJUb0Jhc2U2NHVybChidWZmZXIpIHtcbiAgICAvLyBCdWZmZXIgdG8gYmluYXJ5IHN0cmluZ1xuICAgIGNvbnN0IGJ5dGVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIG9mIGJ5dGVWaWV3KSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICB9XG4gICAgLy8gQmluYXJ5IHN0cmluZyB0byBiYXNlNjRcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKHN0cik7XG4gICAgLy8gQmFzZTY0IHRvIGJhc2U2NHVybFxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBiYXNlNjR1cmwgc3RyaW5nIGlzIHdlbGwtZm9ybWVkLlxuICAgIGNvbnN0IGJhc2U2NHVybFN0cmluZyA9IGJhc2U2NFN0cmluZ1xuICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKVxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICByZXR1cm4gYmFzZTY0dXJsU3RyaW5nO1xufVxuXG5leHBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0dXJsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanM/YjY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBleHBvcnQgdGhlc2UgdmFsdWVzIGluIG9yZGVyIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB0byBkZWR1cGxpY2F0ZVxuLy8gc2NoZW1hIGRlZmluaXRpb25zIGluIG1pbmlmaWVkIEpTIGNvZGUuXG4vLyBUT0RPOiBQYXJjZWwgaXNuJ3QgZGVkdXBsaWNhdGluZyB0aGVzZSB2YWx1ZXMuXG5jb25zdCBjb3B5VmFsdWUgPSBcImNvcHlcIjtcbmNvbnN0IGNvbnZlcnRWYWx1ZSA9IFwiY29udmVydFwiO1xuZnVuY3Rpb24gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYSwgaW5wdXQpIHtcbiAgICBpZiAoc2NoZW1hID09PSBjb3B5VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoc2NoZW1hID09PSBjb252ZXJ0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25GbihpbnB1dCk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKCh2KSA9PiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hWzBdLCB2KSk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgc2NoZW1hRmllbGRdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5kZXJpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2NoZW1hRmllbGQuZGVyaXZlKGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0W2tleV0gPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGtleSBpbiBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZW1hRmllbGQucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmllbGRzIGNhbiBiZSBudWxsIChyYXRoZXIgdGhhbiBtaXNzaW5nIG9yIGB1bmRlZmluZWRgKSwgZS5nLiB0aGVcbiAgICAgICAgICAgIC8vIGB1c2VySGFuZGxlYCBmaWVsZCBvZiB0aGUgYEF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZWA6XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4vI2lmYWNlLWF1dGhlbnRpY2F0b3Jhc3NlcnRpb25yZXNwb25zZVxuICAgICAgICAgICAgaWYgKGlucHV0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYUZpZWxkLnNjaGVtYSwgaW5wdXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXJpdmVkKHNjaGVtYSwgZGVyaXZlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZGVyaXZlLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXF1aXJlZChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5mdW5jdGlvbiBvcHRpb25hbChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNjaGVtYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0LCBjb252ZXJ0VmFsdWUsIGNvcHlWYWx1ZSwgZGVyaXZlZCwgb3B0aW9uYWwsIHJlcXVpcmVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRTs7QUFFcEU7QUFDQTtBQUNBLDRCQUE0Qiw4REFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkRBQWlCO0FBQzdDO0FBQ0E7O0FBRXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9pbmRleC5tanM/NjM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZXNwb25zZVRvSlNPTiwgZ2V0UmVzcG9uc2VUb0pTT04gfSBmcm9tICcuL2FwaS5tanMnO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5jcmVhdGUob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGNyZWF0ZVJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5hc3luYyBmdW5jdGlvbiBnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGdldFJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZSwgZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUY7O0FBRXJGO0FBQ0EsV0FBVyxzREFBUSxDQUFDLG1EQUFTO0FBQzdCLGtCQUFrQixzREFBUSxDQUFDLG1EQUFTO0FBQ3BDLGVBQWUsc0RBQVEsQ0FBQyxtREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHNEQUFRLENBQUMsbURBQVM7QUFDNUIsUUFBUSxzREFBUSxDQUFDLG1EQUFTO0FBQzFCLFdBQVcsc0RBQVEsQ0FBQyxzREFBWTtBQUNoQyw2QkFBNkIsc0RBQVEsQ0FBQyxtREFBUztBQUMvQyxjQUFjLHNEQUFRO0FBQ3RCLHdCQUF3QixzREFBUSxDQUFDLHNEQUFZO0FBQzdDLDJCQUEyQixzREFBUSxDQUFDLHNEQUFZO0FBQ2hELG9CQUFvQixxREFBTyxDQUFDLG1EQUFTO0FBQ3JDLEtBQUs7QUFDTCw0QkFBNEIscURBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBUSxDQUFDLG1EQUFTO0FBQzVCLFFBQVEsc0RBQVEsQ0FBQyxtREFBUztBQUMxQixXQUFXLHNEQUFRLENBQUMsc0RBQVk7QUFDaEMsNkJBQTZCLHNEQUFRLENBQUMsbURBQVM7QUFDL0MsY0FBYyxzREFBUTtBQUN0Qix3QkFBd0Isc0RBQVEsQ0FBQyxzREFBWTtBQUM3QywyQkFBMkIsc0RBQVEsQ0FBQyxzREFBWTtBQUNoRCxtQkFBbUIsc0RBQVEsQ0FBQyxzREFBWTtBQUN4QyxvQkFBb0Isc0RBQVEsQ0FBQyxzREFBWTtBQUN6QyxLQUFLO0FBQ0wsNEJBQTRCLHFEQUFPO0FBQ25DOztBQUVnRjtBQUNoRiIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcz9hNWRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVpcmVkLCBvcHRpb25hbCwgZGVyaXZlZCwgY29weVZhbHVlLCBjb252ZXJ0VmFsdWUgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcblxuY29uc3Qgc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEgPSB7XG4gICAgYXBwaWQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgYXBwaWRFeGNsdWRlOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGNyZWRQcm9wczogb3B0aW9uYWwoY29weVZhbHVlKSxcbn07XG4vLyBgbmF2aWdhdG9yLmNyZWF0ZSgpYCByZXNwb25zZVxuY29uc3QgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiA9IHtcbiAgICB0eXBlOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIGlkOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIHJhd0lkOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIGF1dGhlbnRpY2F0b3JBdHRhY2htZW50OiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIHJlc3BvbnNlOiByZXF1aXJlZCh7XG4gICAgICAgIGNsaWVudERhdGFKU09OOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBhdHRlc3RhdGlvbk9iamVjdDogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgdHJhbnNwb3J0czogZGVyaXZlZChjb3B5VmFsdWUsIChyZXNwb25zZSkgPT4gcmVzcG9uc2UuZ2V0VHJhbnNwb3J0cz8uKCkgfHwgW10pLFxuICAgIH0pLFxuICAgIGNsaWVudEV4dGVuc2lvblJlc3VsdHM6IGRlcml2ZWQoc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEsIChwa2MpID0+IHBrYy5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCkpLFxufTtcbi8vIGBuYXZpZ2F0b3IuZ2V0KClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiA9IHtcbiAgICB0eXBlOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIGlkOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIHJhd0lkOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIGF1dGhlbnRpY2F0b3JBdHRhY2htZW50OiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIHJlc3BvbnNlOiByZXF1aXJlZCh7XG4gICAgICAgIGNsaWVudERhdGFKU09OOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgc2lnbmF0dXJlOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB1c2VySGFuZGxlOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIH0pLFxuICAgIGNsaWVudEV4dGVuc2lvblJlc3VsdHM6IGRlcml2ZWQoc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEsIChwa2MpID0+IHBrYy5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCkpLFxufTtcblxuZXhwb3J0IHsgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24sIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXR0ZXN0YXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/http/dist/webauthn.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(rsc)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEOztBQUV4RCxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyw2REFBRztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFNO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZGO0FBQzdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4ubWpzP2ZiZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlLCBnZXQgfSBmcm9tICcuL3dlYmF1dGhuLWpzb24vaW5kZXgubWpzJztcblxuY29uc3QgZGVmYXVsdFRpbWVvdXQgPSA1ICogNjAgKiAxMDAwOyAvLyBmaXZlIG1pbnV0ZXNcbmNvbnN0IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uID0gXCJwcmVmZXJyZWRcIjtcbmNvbnN0IGRlZmF1bHRTaWduaW5nT3B0aW9ucyA9IHtcbiAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgdGltZW91dDogZGVmYXVsdFRpbWVvdXQsXG4gICAgICAgIHVzZXJWZXJpZmljYXRpb246IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uLFxuICAgIH0sXG59O1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zKHBheWxvYWQsIHRrU2lnbmluZ09wdGlvbnMgPSBkZWZhdWx0U2lnbmluZ09wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFsbGVuZ2UgPSBhd2FpdCBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKTtcbiAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGtTaWduaW5nT3B0aW9ucyxcbiAgICAgICAgcHVibGljS2V5OiB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0U2lnbmluZ09wdGlvbnMucHVibGljS2V5LFxuICAgICAgICAgICAgLi4udGtTaWduaW5nT3B0aW9ucy5wdWJsaWNLZXksXG4gICAgICAgICAgICBjaGFsbGVuZ2UsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc2lnbmluZ09wdGlvbnM7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgY29uc3QgbWVzc2FnZUJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShwYXlsb2FkKTtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsIG1lc3NhZ2VCdWZmZXIpO1xuICAgIGNvbnN0IGhleFN0cmluZyA9IEJ1ZmZlci5mcm9tKGhhc2hCdWZmZXIpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IGhleEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGhleFN0cmluZywgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShoZXhCdWZmZXIpO1xufVxuLyogUHVsbGVkIGZyb20gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmF1dGhuLTIvI2VudW0tdHJhbnNwb3J0ICovXG5mdW5jdGlvbiBwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bShwcm90b2NvbEVudW0pIHtcbiAgICBzd2l0Y2ggKHByb3RvY29sRW51bSkge1xuICAgICAgICBjYXNlIFwiaW50ZXJuYWxcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfSU5URVJOQUxcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidXNiXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX1VTQlwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJuZmNcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfTkZDXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJsZVwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9CTEVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaHlicmlkXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0hZQlJJRFwiO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHRyYW5zcG9ydCBmb3JtYXRcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b0ludGVybmFsQXR0ZXN0YXRpb24oYXR0ZXN0YXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVkZW50aWFsSWQ6IGF0dGVzdGF0aW9uLnJhd0lkLFxuICAgICAgICBhdHRlc3RhdGlvbk9iamVjdDogYXR0ZXN0YXRpb24ucmVzcG9uc2UuYXR0ZXN0YXRpb25PYmplY3QsXG4gICAgICAgIGNsaWVudERhdGFKc29uOiBhdHRlc3RhdGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgdHJhbnNwb3J0czogYXR0ZXN0YXRpb24ucmVzcG9uc2UudHJhbnNwb3J0cy5tYXAocHJvdG9jb2xUcmFuc3BvcnRFbnVtVG9JbnRlcm5hbEVudW0pLFxuICAgIH07XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJBdXRobkFzc2VydGlvbihwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgd2ViQXV0aG5TdXBwb3J0ZWQgPSBoYXNXZWJBdXRoblN1cHBvcnQoKTtcbiAgICBpZiAoIXdlYkF1dGhuU3VwcG9ydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlYmF1dGhuIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IGF3YWl0IGdldENyZWRlbnRpYWxSZXF1ZXN0T3B0aW9ucyhwYXlsb2FkLCBvcHRpb25zKTtcbiAgICBjb25zdCBjbGllbnRHZXRSZXN1bHQgPSBhd2FpdCBnZXQoc2lnbmluZ09wdGlvbnMpO1xuICAgIGNvbnN0IGFzc2VydGlvbiA9IGNsaWVudEdldFJlc3VsdC50b0pTT04oKTtcbiAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IGFzc2VydGlvbi5yZXNwb25zZS5hdXRoZW50aWNhdG9yRGF0YSxcbiAgICAgICAgY2xpZW50RGF0YUpzb246IGFzc2VydGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgY3JlZGVudGlhbElkOiBhc3NlcnRpb24uaWQsXG4gICAgICAgIHNpZ25hdHVyZTogYXNzZXJ0aW9uLnJlc3BvbnNlLnNpZ25hdHVyZSxcbiAgICB9O1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGFtcCk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJBdXRobkF0dGVzdGF0aW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWJBdXRoblN1cHBvcnRlZCA9IGhhc1dlYkF1dGhuU3VwcG9ydCgpO1xuICAgIGlmICghd2ViQXV0aG5TdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2ViYXV0aG4gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZShvcHRpb25zKTtcbiAgICByZXR1cm4gdG9JbnRlcm5hbEF0dGVzdGF0aW9uKHJlcy50b0pTT04oKSk7XG59XG4vLyBgaGFzV2ViQXV0aG5TdXBwb3J0YCBjaGVja3MgZm9yIGJhcmVib25lcyB3ZWJhdXRobiBzdXBwb3J0LlxuLy8gRm9yIGFkZGl0aW9uYWwgZGV0YWlscyBhbmQgZ3JhbnVsYXIgc2V0dGluZ3MsIHNlZTpcbi8vIGh0dHBzOi8vd2ViLmRldi9hcnRpY2xlcy9wYXNza2V5LWZvcm0tYXV0b2ZpbGwjZmVhdHVyZS1kZXRlY3Rpb24sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QdWJsaWNLZXlDcmVkZW50aWFsXG5mdW5jdGlvbiBoYXNXZWJBdXRoblN1cHBvcnQoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LlB1YmxpY0tleUNyZWRlbnRpYWw7XG59XG5cbmV4cG9ydCB7IGdldFdlYkF1dGhuQXNzZXJ0aW9uLCBnZXRXZWJBdXRobkF0dGVzdGF0aW9uLCBwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViYXV0aG4ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/iframe-stamper/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IframeEventType: () => (/* binding */ IframeEventType),\n/* harmony export */   IframeStamper: () => (/* binding */ IframeStamper),\n/* harmony export */   KeyFormat: () => (/* binding */ KeyFormat)\n/* harmony export */ });\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// Set of constants for event types expected to be sent and received between a parent page and its iframe.\nvar IframeEventType;\n(function (IframeEventType) {\n    // Event sent by the iframe to its parent to indicate readiness.\n    // Value: the iframe public key\n    IframeEventType[\"PublicKeyReady\"] = \"PUBLIC_KEY_READY\";\n    // Event sent by the parent to inject a credential bundle (for recovery or auth) into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectCredentialBundle\"] = \"INJECT_CREDENTIAL_BUNDLE\";\n    // Event sent by the parent to inject a private key export bundle into the iframe.\n    // Value: the bundle to inject\n    // Key Format (optional): the key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    // Public Key (optional): the public key of the exported private key. Required when the key format is SOLANA.\n    IframeEventType[\"InjectKeyExportBundle\"] = \"INJECT_KEY_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject a wallet export bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectWalletExportBundle\"] = \"INJECT_WALLET_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject an import bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectImportBundle\"] = \"INJECT_IMPORT_BUNDLE\";\n    // Event sent by the parent to extract an encrypted wallet bundle from the iframe.\n    // Value: none\n    IframeEventType[\"ExtractWalletEncryptedBundle\"] = \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to extract an encrypted private key bundle from the iframe.\n    // Value: none\n    // Key Format (optional): the key format to decode the private key in before it's encrypted for import: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    IframeEventType[\"ExtractKeyEncryptedBundle\"] = \"EXTRACT_KEY_ENCRYPTED_BUNDLE\";\n    // Event sent by the iframe to its parent when `InjectBundle` is successful\n    // Value: true (boolean)\n    IframeEventType[\"BundleInjected\"] = \"BUNDLE_INJECTED\";\n    // Event sent by the iframe to its parent when `ExtractEncryptedBundle` is successful\n    // Value: the bundle encrypted in the iframe\n    IframeEventType[\"EncryptedBundleExtracted\"] = \"ENCRYPTED_BUNDLE_EXTRACTED\";\n    // Event sent by the parent page to request a signature\n    // Value: payload to sign\n    IframeEventType[\"StampRequest\"] = \"STAMP_REQUEST\";\n    // Event sent by the iframe to communicate the result of a stamp operation.\n    // Value: signed payload\n    IframeEventType[\"Stamp\"] = \"STAMP\";\n    // Event sent by the iframe to communicate an error\n    // Value: serialized error\n    IframeEventType[\"Error\"] = \"ERROR\";\n})(IframeEventType || (IframeEventType = {}));\n// Set of constants for private key formats. These formats map to the encoding type used on a private key before encrypting and importing it\n// or after exporting it and decrypting it.\nvar KeyFormat;\n(function (KeyFormat) {\n    // 64 hexadecimal digits. Key format used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum and Tron keys\n    KeyFormat[\"Hexadecimal\"] = \"HEXADECIMAL\";\n    // Key format used by Phantom and Solflare for Solana keys\n    KeyFormat[\"Solana\"] = \"SOLANA\";\n})(KeyFormat || (KeyFormat = {}));\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n * Creating a stamper inserts an iframe in the current page.\n */\nclass IframeStamper {\n    /**\n     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.\n     * Call `.init()` to insert the iframe element in the DOM.\n     */\n    constructor(config) {\n        if (typeof window === \"undefined\") {\n            throw new Error(\"Cannot initialize iframe in non-browser environment\");\n        }\n        if (!config.iframeContainer) {\n            throw new Error(\"Iframe container cannot be found\");\n        }\n        this.container = config.iframeContainer;\n        if (this.container.querySelector(`#${config.iframeElementId}`)) {\n            throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);\n        }\n        let iframe = window.document.createElement(\"iframe\");\n        iframe.id = config.iframeElementId;\n        iframe.src = config.iframeUrl;\n        this.iframe = iframe;\n        const iframeUrl = new URL(config.iframeUrl);\n        this.iframeOrigin = iframeUrl.origin;\n        // This is populated once the iframe is ready. Call `.init()` to kick off DOM insertion!\n        this.iframePublicKey = null;\n    }\n    /**\n     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key\n     */\n    async init() {\n        this.container.appendChild(this.iframe);\n        return new Promise((resolve, _reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out\n                    return;\n                }\n                if (event.data?.type === IframeEventType.PublicKeyReady) {\n                    this.iframePublicKey = event.data[\"value\"];\n                    resolve(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Removes the iframe from the DOM\n     */\n    clear() {\n        this.iframe.remove();\n    }\n    /**\n     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.\n     */\n    publicKey() {\n        return this.iframePublicKey;\n    }\n    /**\n     * Function to inject a new credential into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during recovery and auth flows.\n     */\n    async injectCredentialBundle(bundle) {\n        return new Promise((resolve, reject) => {\n            this.iframe.contentWindow?.postMessage({\n                type: IframeEventType.InjectCredentialBundle,\n                value: bundle,\n            }, \"*\");\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key export flow.\n     */\n    async injectKeyExportBundle(bundle, keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectKeyExportBundle,\n            value: bundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet export flow.\n     */\n    async injectWalletExportBundle(bundle) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectWalletExportBundle,\n            value: bundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an import bundle into the iframe\n     * This is used to initiate either the wallet import flow or the private key import flow.\n     */\n    async injectImportBundle(bundle) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectImportBundle,\n            value: bundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet import flow.\n     */\n    async extractWalletEncryptedBundle() {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractWalletEncryptedBundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key import flow.\n     */\n    async extractKeyEncryptedBundle(keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractKeyEncryptedBundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to sign a payload with the underlying iframe\n     */\n    async stamp(payload) {\n        if (this.iframePublicKey === null) {\n            throw new Error(\"null iframe public key. Have you called/awaited .init()?\");\n        }\n        const iframeOrigin = this.iframeOrigin;\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.StampRequest,\n            value: payload,\n        }, \"*\");\n        return new Promise(function (resolve, reject) {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.Stamp) {\n                    resolve({\n                        stampHeaderName: stampHeaderName,\n                        stampHeaderValue: event.data[\"value\"],\n                    });\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebauthnStamper: () => (/* binding */ WebauthnStamper)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js\");\n\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for a webauthn stamp\nconst stampHeaderName = \"X-Stamp-Webauthn\";\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass WebauthnStamper {\n    constructor(config) {\n        this.rpId = config.rpId;\n        this.timeout = config.timeout || defaultTimeout;\n        this.userVerification = config.userVerification || defaultUserVerification;\n        this.allowCredentials = config.allowCredentials || [];\n    }\n    async stamp(payload) {\n        const challenge = getChallengeFromPayload(payload);\n        const signingOptions = {\n            publicKey: {\n                rpId: this.rpId,\n                challenge: challenge,\n                allowCredentials: this.allowCredentials,\n                timeout: this.timeout,\n                userVerification: this.userVerification,\n            },\n        };\n        const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n        const assertion = clientGetResult.toJSON();\n        const stamp = {\n            authenticatorData: assertion.response.authenticatorData,\n            clientDataJson: assertion.response.clientDataJSON,\n            credentialId: assertion.id,\n            signature: assertion.response.signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: JSON.stringify(stamp),\n        };\n    }\n}\nfunction getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(messageBuffer);\n    const hexString = _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdEO0FBQ1A7QUFDSzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQ0FBc0MsNkRBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDREQUFNO0FBQzdCLHNCQUFzQixrREFBTTtBQUM1QixzQkFBc0Isa0RBQU07QUFDNUI7QUFDQTs7QUFFMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC9pbmRleC5tanM/YjY3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXQgfSBmcm9tICcuL3dlYmF1dGhuLWpzb24vaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1ZmZlciB9IGZyb20gJy4vdW5pdmVyc2FsLm1qcyc7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTI1Nic7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBIZWFkZXIgbmFtZSBmb3IgYSB3ZWJhdXRobiBzdGFtcFxuY29uc3Qgc3RhbXBIZWFkZXJOYW1lID0gXCJYLVN0YW1wLVdlYmF1dGhuXCI7XG5jb25zdCBkZWZhdWx0VGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIGZpdmUgbWludXRlc1xuY29uc3QgZGVmYXVsdFVzZXJWZXJpZmljYXRpb24gPSBcInByZWZlcnJlZFwiO1xuLyoqXG4gKiBTdGFtcGVyIHRvIHVzZSB3aXRoIGBAdHVybmtleS9odHRwYCdzIGBUdXJua2V5Q2xpZW50YFxuICovXG5jbGFzcyBXZWJhdXRoblN0YW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLnJwSWQgPSBjb25maWcucnBJZDtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQgfHwgZGVmYXVsdFRpbWVvdXQ7XG4gICAgICAgIHRoaXMudXNlclZlcmlmaWNhdGlvbiA9IGNvbmZpZy51c2VyVmVyaWZpY2F0aW9uIHx8IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmFsbG93Q3JlZGVudGlhbHMgPSBjb25maWcuYWxsb3dDcmVkZW50aWFscyB8fCBbXTtcbiAgICB9XG4gICAgYXN5bmMgc3RhbXAocGF5bG9hZCkge1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2UgPSBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKTtcbiAgICAgICAgY29uc3Qgc2lnbmluZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgICAgICAgICBycElkOiB0aGlzLnJwSWQsXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2UsXG4gICAgICAgICAgICAgICAgYWxsb3dDcmVkZW50aWFsczogdGhpcy5hbGxvd0NyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHRoaXMudGltZW91dCxcbiAgICAgICAgICAgICAgICB1c2VyVmVyaWZpY2F0aW9uOiB0aGlzLnVzZXJWZXJpZmljYXRpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGllbnRHZXRSZXN1bHQgPSBhd2FpdCBnZXQoc2lnbmluZ09wdGlvbnMpO1xuICAgICAgICBjb25zdCBhc3NlcnRpb24gPSBjbGllbnRHZXRSZXN1bHQudG9KU09OKCk7XG4gICAgICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IGFzc2VydGlvbi5yZXNwb25zZS5hdXRoZW50aWNhdG9yRGF0YSxcbiAgICAgICAgICAgIGNsaWVudERhdGFKc29uOiBhc3NlcnRpb24ucmVzcG9uc2UuY2xpZW50RGF0YUpTT04sXG4gICAgICAgICAgICBjcmVkZW50aWFsSWQ6IGFzc2VydGlvbi5pZCxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogYXNzZXJ0aW9uLnJlc3BvbnNlLnNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyTmFtZTogc3RhbXBIZWFkZXJOYW1lLFxuICAgICAgICAgICAgc3RhbXBIZWFkZXJWYWx1ZTogSlNPTi5zdHJpbmdpZnkoc3RhbXApLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBtZXNzYWdlQnVmZmVyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHBheWxvYWQpO1xuICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBzaGEyNTYobWVzc2FnZUJ1ZmZlcik7XG4gICAgY29uc3QgaGV4U3RyaW5nID0gYnVmZmVyLmZyb20oaGFzaEJ1ZmZlcikudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgaGV4QnVmZmVyID0gYnVmZmVyLmZyb20oaGV4U3RyaW5nLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhleEJ1ZmZlcik7XG59XG5cbmV4cG9ydCB7IFdlYmF1dGhuU3RhbXBlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buffer: () => (/* binding */ buffer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n\n\n/// <reference lib=\"dom\" />\nlet buffer;\nif (typeof globalThis?.Buffer !== \"undefined\") {\n    buffer = globalThis.Buffer;\n}\nelse {\n    buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n}\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMENBQU07QUFDbkI7O0FBRWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3QvdW5pdmVyc2FsLm1qcz9iNjIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5sZXQgYnVmZmVyO1xuaWYgKHR5cGVvZiBnbG9iYWxUaGlzPy5CdWZmZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBidWZmZXIgPSBnbG9iYWxUaGlzLkJ1ZmZlcjtcbn1cbmVsc2Uge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlcjtcbn1cblxuZXhwb3J0IHsgYnVmZmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml2ZXJzYWwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ1o7QUFDd0I7O0FBRWhFO0FBQ0EsV0FBVyxxREFBTyxDQUFDLDZEQUFpQixFQUFFLHlFQUFnQztBQUN0RTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2FwaS5tanM/YmEyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5pbXBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9IGZyb20gJy4vc2NoZW1hLm1qcyc7XG5cbmZ1bmN0aW9uIGdldFJlc3BvbnNlVG9KU09OKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gY29udmVydChidWZmZXJUb0Jhc2U2NHVybCwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24sIGNyZWRlbnRpYWwpO1xufVxuXG5leHBvcnQgeyBnZXRSZXNwb25zZVRvSlNPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanM/ZGQ5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBidWZmZXJUb0Jhc2U2NHVybChidWZmZXIpIHtcbiAgICAvLyBCdWZmZXIgdG8gYmluYXJ5IHN0cmluZ1xuICAgIGNvbnN0IGJ5dGVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIG9mIGJ5dGVWaWV3KSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICB9XG4gICAgLy8gQmluYXJ5IHN0cmluZyB0byBiYXNlNjRcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKHN0cik7XG4gICAgLy8gQmFzZTY0IHRvIGJhc2U2NHVybFxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBiYXNlNjR1cmwgc3RyaW5nIGlzIHdlbGwtZm9ybWVkLlxuICAgIGNvbnN0IGJhc2U2NHVybFN0cmluZyA9IGJhc2U2NFN0cmluZ1xuICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKVxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICByZXR1cm4gYmFzZTY0dXJsU3RyaW5nO1xufVxuXG5leHBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0dXJsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanM/NGE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBleHBvcnQgdGhlc2UgdmFsdWVzIGluIG9yZGVyIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB0byBkZWR1cGxpY2F0ZVxuLy8gc2NoZW1hIGRlZmluaXRpb25zIGluIG1pbmlmaWVkIEpTIGNvZGUuXG4vLyBUT0RPOiBQYXJjZWwgaXNuJ3QgZGVkdXBsaWNhdGluZyB0aGVzZSB2YWx1ZXMuXG5jb25zdCBjb3B5VmFsdWUgPSBcImNvcHlcIjtcbmNvbnN0IGNvbnZlcnRWYWx1ZSA9IFwiY29udmVydFwiO1xuZnVuY3Rpb24gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYSwgaW5wdXQpIHtcbiAgICBpZiAoc2NoZW1hID09PSBjb3B5VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoc2NoZW1hID09PSBjb252ZXJ0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25GbihpbnB1dCk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKCh2KSA9PiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hWzBdLCB2KSk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgc2NoZW1hRmllbGRdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5kZXJpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2NoZW1hRmllbGQuZGVyaXZlKGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0W2tleV0gPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGtleSBpbiBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZW1hRmllbGQucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmllbGRzIGNhbiBiZSBudWxsIChyYXRoZXIgdGhhbiBtaXNzaW5nIG9yIGB1bmRlZmluZWRgKSwgZS5nLiB0aGVcbiAgICAgICAgICAgIC8vIGB1c2VySGFuZGxlYCBmaWVsZCBvZiB0aGUgYEF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZWA6XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4vI2lmYWNlLWF1dGhlbnRpY2F0b3Jhc3NlcnRpb25yZXNwb25zZVxuICAgICAgICAgICAgaWYgKGlucHV0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYUZpZWxkLnNjaGVtYSwgaW5wdXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXJpdmVkKHNjaGVtYSwgZGVyaXZlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZGVyaXZlLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXF1aXJlZChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5mdW5jdGlvbiBvcHRpb25hbChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNjaGVtYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0LCBjb252ZXJ0VmFsdWUsIGNvcHlWYWx1ZSwgZGVyaXZlZCwgb3B0aW9uYWwsIHJlcXVpcmVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\");\n\n\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDOztBQUU5QztBQUNBO0FBQ0EsNEJBQTRCLDJEQUFpQjtBQUM3QztBQUNBOztBQUVlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2luZGV4Lm1qcz9iMGU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFJlc3BvbnNlVG9KU09OIH0gZnJvbSAnLi9hcGkubWpzJztcblxuYXN5bmMgZnVuY3Rpb24gZ2V0KG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IChhd2FpdCBuYXZpZ2F0b3IuY3JlZGVudGlhbHMuZ2V0KG9wdGlvbnMpKTtcbiAgICByZXNwb25zZS50b0pTT04gPSAoKSA9PiBnZXRSZXNwb25zZVRvSlNPTihyZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5leHBvcnQgeyBnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRjs7QUFFckY7QUFDQSxXQUFXLHNEQUFRLENBQUMsbURBQVM7QUFDN0Isa0JBQWtCLHNEQUFRLENBQUMsbURBQVM7QUFDcEMsZUFBZSxzREFBUSxDQUFDLG1EQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsbUJBQW1CLHNEQUFRLENBQUMsc0RBQVk7QUFDeEMsb0JBQW9CLHNEQUFRLENBQUMsc0RBQVk7QUFDekMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQzs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanM/Y2QzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXF1aXJlZCwgb3B0aW9uYWwsIGRlcml2ZWQsIGNvcHlWYWx1ZSwgY29udmVydFZhbHVlIH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5cbmNvbnN0IHNpbXBsaWZpZWRDbGllbnRFeHRlbnNpb25SZXN1bHRzU2NoZW1hID0ge1xuICAgIGFwcGlkOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGFwcGlkRXhjbHVkZTogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICBjcmVkUHJvcHM6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG59O1xuLy8gYG5hdmlnYXRvci5nZXQoKWAgcmVzcG9uc2VcbmNvbnN0IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBzaWduYXR1cmU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHVzZXJIYW5kbGU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuXG5leHBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQSwwREFBMEQsRUFBRTtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLGtCQUFrQixTQUFTO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsSUFBSTtBQUNyRjtBQUNBO0FBQ3FEO0FBQ3JELGlCQUFpQjtBQUNqQixpRUFBZSxNQUFNLEVBQUM7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWJlZGRlZC1hY2NvdW50cy1xdWlja3N0YXJ0Ly4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanM/N2FhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgcG9zaXRpdmUgaW50ZWdlciBleHBlY3RlZCwgbm90ICR7bn1gKTtcbn1cbmZ1bmN0aW9uIGJvb2woYikge1xuICAgIGlmICh0eXBlb2YgYiAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJvb2xlYW4gZXhwZWN0ZWQsIG5vdCAke2J9YCk7XG59XG4vLyBjb3BpZWQgZnJvbSB1dGlsc1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXMoYSkge1xuICAgIHJldHVybiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHxcbiAgICAgICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIWlzQnl0ZXMoYikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCcpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVpbnQ4QXJyYXkgZXhwZWN0ZWQgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGhhc2goaCkge1xuICAgIGlmICh0eXBlb2YgaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoLmJsb2NrTGVuKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydCB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX21kLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThDO0FBQ1M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08scUJBQXFCLDJDQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscURBQVU7QUFDOUI7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxnQkFBZ0IseUJBQXlCO0FBQ3pDLGVBQWUsa0RBQU87QUFDdEI7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0MsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxRQUFRLGtEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixjQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxREFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFEQUFxRDtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYmVkZGVkLWFjY291bnRzLXF1aWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX21kLmpzPzU2YWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzLCBvdXRwdXQgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgY3JlYXRlVmlldywgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gUG9seWZpbGwgZm9yIFNhZmFyaSAxNFxuZnVuY3Rpb24gc2V0QmlnVWludDY0KHZpZXcsIGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpZXcuc2V0QmlnVWludDY0KGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKTtcbiAgICBjb25zdCBfMzJuID0gQmlnSW50KDMyKTtcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcbiAgICBjb25zdCB3aCA9IE51bWJlcigodmFsdWUgPj4gXzMybikgJiBfdTMyX21heCk7XG4gICAgY29uc3Qgd2wgPSBOdW1iZXIodmFsdWUgJiBfdTMyX21heCk7XG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcbiAgICBjb25zdCBsID0gaXNMRSA/IDAgOiA0O1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBoLCB3aCwgaXNMRSk7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcbn1cbi8vIENob2ljZTogYSA/IGIgOiBjXG5leHBvcnQgY29uc3QgQ2hpID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAofmEgJiBjKTtcbi8vIE1ham9yaXR5IGZ1bmN0aW9uLCB0cnVlIGlmIGFueSB0d28gaW5wdXN0IGlzIHRydWVcbmV4cG9ydCBjb25zdCBNYWogPSAoYSwgYiwgYykgPT4gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuLyoqXG4gKiBNZXJrbGUtRGFtZ2FyZCBoYXNoIGNvbnN0cnVjdGlvbiBiYXNlIGNsYXNzLlxuICogQ291bGQgYmUgdXNlZCB0byBjcmVhdGUgTUQ1LCBSSVBFTUQsIFNIQTEsIFNIQTIuXG4gKi9cbmV4cG9ydCBjbGFzcyBIYXNoTUQgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBjcmVhdGVWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBjb25zdCB7IHZpZXcsIGJ1ZmZlciwgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIGRhdGEgPSB0b0J5dGVzKGRhdGEpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICAvLyBGYXN0IHBhdGg6IHdlIGhhdmUgYXQgbGVhc3Qgb25lIGJsb2NrIGluIGlucHV0LCBjYXN0IGl0IHRvIHZpZXcgYW5kIHByb2Nlc3NcbiAgICAgICAgICAgIGlmICh0YWtlID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gY3JlYXRlVmlldyhkYXRhKTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgYmxvY2tMZW4gPD0gbGVuIC0gcG9zOyBwb3MgKz0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyhkYXRhVmlldywgcG9zKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoZGF0YS5zdWJhcnJheShwb3MsIHBvcyArIHRha2UpLCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSB0YWtlO1xuICAgICAgICAgICAgcG9zICs9IHRha2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yb3VuZENsZWFuKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIG91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpblxuICAgICAgICAvLyBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dHB1dExlbjtcbiAgICAgICAgLy8gTk9URTogd2UgZG8gZGl2aXNpb24gYnkgNCBsYXRlciwgd2hpY2ggc2hvdWxkIGJlIGZ1c2VkIGluIHNpbmdsZSBvcCB3aXRoIG1vZHVsbyBieSBKSVRcbiAgICAgICAgaWYgKGxlbiAlIDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gc2hvdWxkIGJlIGFsaWduZWQgdG8gMzJiaXQnKTtcbiAgICAgICAgY29uc3Qgb3V0TGVuID0gbGVuIC8gNDtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAob3V0TGVuID4gc3RhdGUubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXG4gICAgICAgICAgICBvdmlldy5zZXRVaW50MzIoNCAqIGksIHN0YXRlW2ldLCBpc0xFKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8oYnVmZmVyKTtcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIGJ1ZmZlciwgbGVuZ3RoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBwb3MgfSA9IHRoaXM7XG4gICAgICAgIHRvLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdG8ucG9zID0gcG9zO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcbiAgICAgICAgICAgIHRvLmJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9tZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUMzQixlQUFlLDJNQUFFLFdBQVcsMk1BQUUsaUJBQWlCLDBOQUFpQixHQUFHLGtEQUFZO0FBQ3RGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1iZWRkZWQtYWNjb3VudHMtcXVpY2tzdGFydC8uL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzPzI2MTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBTZWUgdXRpbHMudHMgZm9yIGRldGFpbHMuXG4vLyBUaGUgZmlsZSB3aWxsIHRocm93IG9uIG5vZGUuanMgMTQgYW5kIGVhcmxpZXIuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBuYyBmcm9tICdub2RlOmNyeXB0byc7XG5leHBvcnQgY29uc3QgY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuYyA/IG5jLndlYmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@turnkey/webauthn-stamper/node_modules/@noble/hashes/esm/utils.js\n");

/***/ })

};
;